<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios7 | Marcin Pędzimąż]]></title>
  <link href="http://noxytrux.github.io/blog/categories/ios7/atom.xml" rel="self"/>
  <link href="http://noxytrux.github.io/"/>
  <updated>2014-10-09T14:15:30+02:00</updated>
  <id>http://noxytrux.github.io/</id>
  <author>
    <name><![CDATA[Marcin Pędzimąż]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS UIButton backgroundColor you do it wrong...]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/25/ios-uibutton-backgroundcolor-you-do-it-wrong-dot-dot-dot/"/>
    <updated>2014-09-25T16:21:30+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/25/ios-uibutton-backgroundcolor-you-do-it-wrong-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>This post is for those who are just starting they journey with iOS and Swift and want to learn some good practices on how to build this nice looking flat UI in modern iOS. Basically i want to talk about rectangle buttons that are filled with color. I saw some really bad implementations of <code>UIButton</code> and now, I want to present you a common mistake, i ofen see in many project even those mature ones.</p>

<!--more-->


<p>This image descibes our tutorial code, we have two button first one is done in bad habit and uses backgroundcolor and second one is done using background image property.</p>

<p><img class="center" src="/assets/images/look_buttons.png" width="300"></p>

<p>Basically backgroundColor property is good thing to use in Interface Builder to see how the button will looks like. But if you try to manage states you will end up with something like this:</p>

<pre><code class="Ruby">
@IBAction func buttonHightlight(sender: UIButton!) {

    sender.backgroundColor = UIColor(red: 255.0/255.0, green: 81.0/255.0, blue: 85.0/255.0, alpha: 0.5)    
}

@IBAction func buttonNormal(sender: UIButton!) {

    sender.backgroundColor = UIColor(red: 255.0/255.0, green: 81.0/255.0, blue: 85.0/255.0, alpha: 1.0)
}
</code></pre>

<p>It is event worst because your states in IB looks very similar to this:</p>

<p><img class="center" src="/assets/images/selector_ohno.png" width="300"></p>

<p>Madness and disaster, seriously that&rsquo;s not how you want to build your button, highlight state is build in and it&rsquo;s for free. And of course you only want to call function reponsible for pressing button no additional ones.</p>

<p>To do that we should use backgroundImage property of <code>UIButton</code>, but to not generate any additional assets let&rsquo;s build two extensions. First one will be reponsibe for generating <code>UIImage</code> from <code>UIColor</code> so we can set it directly from code.</p>

<pre><code class="Ruby">
import UIKit

extension UIImage {

    class func imageWithColor(color:UIColor?) -&gt; UIImage! {

        let rect = CGRectMake(0.0, 0.0, 1.0, 1.0);

        UIGraphicsBeginImageContextWithOptions(rect.size, false, 0)

        let context = UIGraphicsGetCurrentContext();

        if let color = color {

            color.setFill()
        }
        else {

            UIColor.whiteColor().setFill()
        }

        CGContextFillRect(context, rect);

        let image = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();

        return image;
    }

}
</code></pre>

<p>Second one is not required but is very usefull, and allow you to copy and paste color from eg gimp or photoshop. We are talking about UIColor extension that allow us to use hexadecimal strings as input value.</p>

<pre><code class="Ruby">
import UIKit

extension UIColor {

    class func colorWithHex(hexString: String?) -&gt; UIColor? {

        return colorWithHex(hexString, alpha: 1.0)
    }

    class func colorWithHex(hexString: String?, alpha: CGFloat) -&gt; UIColor? {

        if let hexString = hexString {

            var error : NSError? = nil

            let regexp = NSRegularExpression(pattern: "\\A#[0-9a-f]{6}\\z",
                options: .CaseInsensitive,
                error: &amp;error)

            let count = regexp.numberOfMatchesInString(hexString,
                options: .ReportProgress,
                range: NSMakeRange(0, countElements(hexString)))

            if count != 1 {

                return nil
            }

            var rgbValue : UInt32 = 0

            let scanner = NSScanner(string: hexString)

            scanner.scanLocation = 1
            scanner.scanHexInt(&amp;rgbValue)

            let red   = CGFloat( (rgbValue &amp; 0xFF0000) &gt;&gt; 16) / 255.0
            let green = CGFloat( (rgbValue &amp; 0xFF00) &gt;&gt; 8) / 255.0
            let blue  = CGFloat( (rgbValue &amp; 0xFF) ) / 255.0

            return UIColor(red: red, green: green, blue: blue, alpha: alpha)
        }

        return nil
    }

}
</code></pre>

<p>And that&rsquo;s it, so how do we set our good button ? like this:</p>

<pre><code class="Ruby">
//good button...
goodButton.backgroundColor = UIColor.clearColor() //reset IB Color
goodButton.setBackgroundImage(UIImage.imageWithColor(UIColor.colorWithHex("#66D269")), forState: .Normal)
goodButton.setBackgroundImage(UIImage.imageWithColor(UIColor.colorWithHex("#66D269", alpha: 0.5)), forState: .Highlighted)
</code></pre>

<p>So reassuming, do not use <code>IBAction</code> to modify button color, hightlight state etc. Use backgroundImage and if you don&rsquo;t want to use assets build them from code using extensions. As always <a href="https://github.com/noxytrux/ButtonsGoodPracticeTutorial">source code</a> on my github page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 Weirdness Part3: Laggy UICollectionView]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/25/ios8-weirdness-part3-laggy-uicollectionview/"/>
    <updated>2014-09-25T10:03:36+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/25/ios8-weirdness-part3-laggy-uicollectionview</id>
    <content type="html"><![CDATA[<p>Autolayouts, something that people love and hate. When Apple introduced them i had mixed felling about it, from one hand it reduces tons of code, also do a lot of calculation for you and of course it magically works! In other hand&hellip; it is terribly slow i still see my manual <code>setFrame:</code> at least 10 times faster than calculation something in AL but nothing for free.</p>

<!--more-->


<p></p>

<p>This post will not be long, the main problem is that as most of you may know using autolayout in scrollview is pain in ass terrible slow due to continous autolayout recalculation mostly if you use xib loaded view with AL attached to them. So why not to use UICollectionView better, faster, bigger, stronger. I have heavy collection view with very complicated cells (in terms of autolayout) but they are done pretty smart and work really fast and smooth, of course only in iOS7</p>

<p>After updating my ipad to iOS8 i encounter terrible lags while scrolling <code>UICollectionView</code> in my app. Again instruments bug haunting with tons of coffee shows me that my amazing <code>UICollectionView</code> starts acting exacly like ugly <code>UIScrollView</code> solution and recalculates cells autolayout over and over again!</p>

<p><img class="center" src="/assets/images/ohcomone.gif"></p>

<p>Gladly solution to that is pretty simple. If you watched <a href="https://developer.apple.com/videos/wwdc/2014/">WWDC 2014</a> about changes in collection view you propably noticed that Apple introduces some new Invaidation Context etc. But we do not need to implement all of that if you want to get your smooth and nice scrolling the only thing you need is to implement this method in your custom <code>UICollectionViewCell</code></p>

<pre><code class="objc">
- (UICollectionViewLayoutAttributes *)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes *)layoutAttributes
{
    return layoutAttributes;
}
</code></pre>

<p>And you are done! Collection view again works as expected, it happens because this is called before autolayout calcualtion and it returns proper cell size so there is no need to trigger recalcualtion again. You should see some visual changes eg collection view cell will no more weirdly rescale from 1x1 to it desired scale.</p>

<p>That&rsquo;s all for now, next time some UIButton good practices for those who just start coding in iOS and want their flat buttons looks and works good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 Weirdness Part2: Modal ViewController]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/24/ios8-weirdness-part2-modal-viewcontroller/"/>
    <updated>2014-09-24T16:49:51+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/24/ios8-weirdness-part2-modal-viewcontroller</id>
    <content type="html"><![CDATA[<p>As i promised we are continuing werid iOS8 bugs i encounter after update. Last one was funny but this one is a masterpiece. Imagine you have project where your user can type some values eg. add contact, some place or something. We want to help our user by giving him some hints while typing or some predefinied values he can choose from. It is a good idea to present this kind of view as a modal view controller&hellip;</p>

<!--more-->


<p>Imagine my reaction to my stable iOS7 code when my QA guy come to me and said something like this:</p>

<p>&ldquo;Why all our modal view controllers can close by themselves, i mean look if you dismiss popover on that modal view it will close.&rdquo;</p>

<p><img class="right" src="/assets/images/whatthehell.gif"></p>

<p>Sounds quiet funny right? How the hell modally showed <code>UIViewController</code> can close just like that without pressing anything. But after few hours of debbuging i was not so happy it actually happend to me! All the time i was dimissing <code>UIPopoverController</code> the modal view was dimissing with this popover! But there is a trick behing this you need to set your view stack like this:</p>

<p><code>UINavigationViewController</code> that holds <code>UIViewController</code> and from here you can open modal <code>UIViewController</code> that contains some containers. In some big project im participating we have some reusable ViewControllers that doing specific things one of it is <code>UIViewController</code> with <code>UITextField</code> in it. If you press on that <code>UITextField</code> a popover will show to help you choose / find some value. So this is how our app looks / works:</p>

<p><img class="center" src="/assets/images/modalOK.gif" width="800"></p>

<p>Pretty simple, so the app opens some modal view and contains this funny component. Ofc this code works fine on iOS7, now if we run this on iOS8 we will see somethings like this:</p>

<p><img class="center" src="/assets/images/modalBAD.gif" width="800"></p>

<p>So wherever user tap outside to dismiss <code>UIPopoverController</code> (i created it from code to avoid <a href="http://noxytrux.github.io/blog/2014/09/17/ios8-weirdness-part1-uipopovercontroller/">latest</a> issues) modal controller also dimiss&hellip; It took me some cups of coffet to recognize what is wrong but before that let&rsquo;s see some code that is responsible for this. I will not describe whole example code just the green <code>UIViewController</code> that is placed using container segue.</p>

<pre><code class="objc">#import "MWLContainerViewController.h"
#import "MWLCitiesTableViewController.h"

@interface MWLContainerViewController ()
&lt;UITextFieldDelegate,
UIPopoverControllerDelegate,
MWLCitiesTableViewControllerDelegate&gt;

@property (nonatomic, weak) IBOutlet UITextField *typeCityTextField;
@property (nonatomic, strong) UIPopoverController *searchPopoverController;
@property (assign, nonatomic, getter = isKeyboardVisible) BOOL keyboardVisible;
@property (nonatomic, weak) MWLCitiesTableViewController *selectionController;

@end

@implementation MWLContainerViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.typeCityTextField.delegate = self;
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardDidShow:)
                                                 name:UIKeyboardDidShowNotification
                                               object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardDidHide:)
                                                 name:UIKeyboardDidHideNotification
                                               object:nil];
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];

    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

-(void)keyboardDidShow:(NSNotification *)notification
{
    self.keyboardVisible = YES;

    if(self.typeCityTextField.editing) {

        [self showControllerIfNeeded:self.typeCityTextField];
    }
}

-(void)keyboardDidHide:(NSNotification *)notification
{
    self.keyboardVisible = NO;
}

- (void)showControllerIfNeeded:(UIView *)sender
{
    if(self.searchPopoverController.popoverVisible == NO &amp;&amp; self.keyboardVisible == YES) {

        self.searchPopoverController = [self itemSelectionPopover];
        [self.searchPopoverController presentPopoverFromRect:sender.bounds
                                                      inView:sender
                                    permittedArrowDirections:UIPopoverArrowDirectionDown
                                                    animated:YES];
    }
}

- (UIPopoverController *)itemSelectionPopover
{
    MWLCitiesTableViewController *cityController = [self.storyboard instantiateViewControllerWithIdentifier:kMWLSegueControllerIdentifier];
    self.selectionController = cityController;
    self.selectionController.delegate = self;

    UIPopoverController *popoverController = [[UIPopoverController alloc] initWithContentViewController:cityController];

    popoverController.delegate = self;
    popoverController.popoverContentSize = CGSizeMake(300, 400);

    return popoverController;
}

#pragma mark - UITextFieldDelegate

- (void)textFieldDidBeginEditing:(UITextField *)textField
{
    self.typeCityTextField.clearsOnInsertion = YES;

    [self showControllerIfNeeded:textField];
}

- (void)textFieldDidEndEditing:(UITextField *)textField
{
    [self.searchPopoverController dismissPopoverAnimated:YES];
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];

    return YES;
}

#pragma mark - UIPopoverControllerDelegate

- (void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController
{
    //delegate down
}

- (BOOL)popoverControllerShouldDismissPopover:(UIPopoverController *)popoverController
{
    [self.typeCityTextField resignFirstResponder];

    return YES;
}

#pragma mark - MWLCitiesTableViewControllerDelegate

- (void)citiesTableView:(MWLCitiesTableViewController *)sender
          didSelectCity:(NSString *)cityName
{
    self.typeCityTextField.text = cityName;
    [self.typeCityTextField resignFirstResponder];
}

@end
</code></pre>

<p>Ok so we have view controller that hold <code>UITextField</code> and <code>UIPopoverController</code> and opens it when user focus on the textfield. Popover will close if:</p>

<p>a) User enter something and hide keyboard using hide key (bottom right corner)  <br/>
b) User will press return button on keyboard <br/>
c) User will select some value from popover <br/>
d) User will tap outside to dimiss popover</p>

<p>Every seems to work fine except the last scenario where user tap outside to cancel and hide popover. So it is again connected with <code>UIPopoverController</code> delegate methods as option a, b, c closes popover from code using <code>[self.searchPopoverController dismissPopoverAnimated:YES];</code> and as we all know popover delegate methods are called ONLY if you close popover by touching outside of it. Moving forward if you look closely you will recognize that when this code executes</p>

<pre><code class="objc">
- (BOOL)popoverControllerShouldDismissPopover:(UIPopoverController *)popoverController
{
    [self.typeCityTextField resignFirstResponder];

    return YES;
}
</code></pre>

<p>we are acutally calling this</p>

<pre><code class="objc">
- (void)textFieldDidEndEditing:(UITextField *)textField
{
    [self.searchPopoverController dismissPopoverAnimated:YES];
}
</code></pre>

<p>before we leave function, so in iOS8 we are trying to close already closing popover, why this code works on iOS7? maybe there is difference in responder chain so that&rsquo;s why we are passing dimiss command down in responder. If you not belive me try and set break point in viewDidDisappear :) Reassuming to fix this isse we need to change this line:</p>

<pre><code class="objc">
- (BOOL)popoverControllerShouldDismissPopover:(UIPopoverController *)popoverController
{
    [self.typeCityTextField resignFirstResponder];

    return NO; //YES; 
}
</code></pre>

<p>So there is no more duplicated dimiss command moving around in our view. Acutally in this example we are alwasy sure that we call <code>textFieldDidEndEditing</code> no matter user do. But if you ever encounter some stupid , weird behaviours of your modal views you should first look at reponder chain logic.</p>

<p>That&rsquo;s it, <a href="https://github.com/noxytrux/iOS8ModalViewIssue">source code</a> as always available on my github page. Next time another iOS8 issue that helps us develop &ldquo;better&rdquo; code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 Weirdness part1: UIPopoverController]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/17/ios8-weirdness-part1-uipopovercontroller/"/>
    <updated>2014-09-17T11:18:09+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/17/ios8-weirdness-part1-uipopovercontroller</id>
    <content type="html"><![CDATA[<p>As and old wolf programmer with years of expirence in iOS I survive most of big iOS updates including switch from 4.2 to 5, from 5 to 6 and so on. Some people remember time when your app was able to work fine on all iOS verions, but all of that changes with iOS7 it makes a big change to how app are made. There is no more easy way to support iOS6 and iOS7 in one app. Apple make new iOS7 API really cool, now we have truly working Interface Builder, StoryBoards, Autolayouts etc. Making apps was never easier before. iOS8 looks event almost the same, so what could possibly go wrong?&hellip;</p>

<!--more-->


<p>Actually, a lot of things&hellip; But you say: &ldquo;oh comone, it not so bad at all. The era of dirty hacks is away!&rdquo; - NOPE.</p>

<p>With iOS8 Apple introduced new way to handle <code>UIAlert</code>, <code>UIActionSheet</code> and <code>UIPopoverController</code> by introducing brand new <code>UIPopoverPresentationController</code> and <code>UIAlertController</code>, but as we all know sometimes when you build big app that is developed for few months it is not an easy decision to drop support for specified iOS version&hellip; So let&rsquo;s support both! Of course we are not allowed to use new stuff, we still want our app to support iOS7 so we are not touching our code in terms of rewriting to new popovers and alerts.</p>

<p>If you prefer setuping popovers from code this article is not propably for you but if you are &ldquo;modern&rdquo; like me and you cannot anymore live without storyboards and segues you will be suprised what amazing new &ldquo;features&rdquo; iOS8 may bring to your iPad Application. Imagine this scenario: You are building your iPad app which require from you to select some values, so the natural way to handle that is to present data set in popover. Now let&rsquo;s say my app is some kind of alarm app so i need to setup and display time. I build my app and it works like a harm, no rocket sience here it&rsquo;s a simple one view controller app that fire up UIStoryBoardPopoverSegue when button gets pressed. The image explain app flow (look carefuly your popover segue is now set as deprecated in xCode 6 coz you should use new one which we can&rsquo;t use due to iOS7 support) so the app will works as described below:</p>

<p><img class="center" src="/assets/images/appflowpopovers.png" width="800"></p>

<p>a) User can press &ldquo;Set my date!&rdquo; button which opens Popover with DatePicker (sets &lsquo;now&rsquo; if date does not exist)<br/>
b) User can select date <br/>
c) By dimissing popover user is able to set new date<br/>
d) If user press button again popover will open with latest date selected</p>

<p>If we run the app on iOS7 this is what we will get:</p>

<p><img class="center" src="/assets/images/popoversOK.gif" width="800"></p>

<p>Ok time for some code, honestly there not to much to explain. First let&rsquo;s see how do we implement our DatePicker Controller:</p>

<pre><code class="objc">
#import &lt;UIKit/UIKit.h&gt;

@interface LABDateViewController : UIViewController

@property (nonatomic, strong) NSDate *date;
@property (nonatomic, weak) IBOutlet UIDatePicker *datePicker;

@end
</code></pre>

<p>So regular UIViewController with UIDatePicker attached via Outlet, now let&rsquo;s see what does it actually do:</p>

<pre><code class="objc">
#import "LABDateViewController.h"

@implementation LABDateViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self.datePicker addTarget:self
                        action:@selector(didChangeDate:)
              forControlEvents:UIControlEventValueChanged];
}

- (NSDate *)date
{
    return self.datePicker.date;
}

- (void)setDate:(NSDate *)date
{
    [self.datePicker setDate:date animated:YES];
}

- (void)didChangeDate:(UIDatePicker *)picker
{
    //send date somewhere, update, watewa
}

@end
</code></pre>

<p>As we can expected not to much it is very simple VC that only sets and gets seleted date by overwriting setter and getter of our date property.</p>

<p>Now the main logic:</p>

<pre><code class="objc">
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ( [segue.identifier isEqualToString:LABDisplayTimePopoverSegueIdentifier]) {

        if (!self.currentDate) {

            self.currentDate = [NSDate date];
        }

        UIStoryboardPopoverSegue *popover = (UIStoryboardPopoverSegue*)segue;
        popover.popoverController.delegate = self;

        LABDateViewController *c = (LABDateViewController *)popover.popoverController.contentViewController;

        [c.datePicker setDate:self.currentDate animated:YES];
    }
}

#pragma mark - popover delegate

- (BOOL)popoverControllerShouldDismissPopover:(UIPopoverController *)popoverController;
{
    return YES;
}

- (void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController
{
    //update title
    LABDateViewController *vc = (LABDateViewController*)popoverController.contentViewController;

    self.currentDate = vc.date;

    NSAssert(self.currentDate != nil, @"Upsss...");

    NSString *title = [self.dateFormatter stringFromDate:self.currentDate];

    [self.dateButton setTitle:title
                     forState:UIControlStateNormal];
}
</code></pre>

<p>As I said not much to explain simply we are passing date if exist to our created <code>UIPopoverController</code> which is supplied by <code>UIStoryboardPopoverSegue</code> at the moment we pressed button. We also set ourselfs as delegate so we can respond to popover dimiss. So after it disappear we can set currently selected value and update button title.</p>

<p>Now guess what happens if you try to run this on iOS8 Device / Simulator ? Yes it will stop working :) Value will not update, button title will stay the same, basically madness and tons of WTF per minute.</p>

<p><img class="center" src="/assets/images/popoversError.gif" width="800"></p>

<p>So where is the problem ? If you set breakpoint in any of delegate methods you will see that they are actually not called, not at all&hellip; So the next line that we may be interested is:</p>

<pre><code class="objc">UIStoryboardPopoverSegue *popover = (UIStoryboardPopoverSegue*)segue;
popover.popoverController.delegate = self;
</code></pre>

<p>Setting the actual delegate, looks fine even if you go deeper and check StoryboardSegue you will see this:</p>

<pre><code class="objc">#import &lt;UIKit/UIStoryboardSegue.h&gt;

@class UIPopoverController;

NS_CLASS_AVAILABLE_IOS(5_0) @interface UIStoryboardPopoverSegue : UIStoryboardSegue {
}

@property (nonatomic, retain, readonly) UIPopoverController *popoverController;

@end
</code></pre>

<p>So it looks like <code>UIPopoverController</code> is retained and all is ok! The truth is that is not, i cannot explain why is this happening but after we assign our delegate the connection is droped like the popover has weak reference in the segue&hellip; The way to fix that without doing whole loading from code is to simply assing popover to strong variable, so the quick fix for that is:</p>

<pre><code class="objc">
@interface LABViewController () &lt;UIPopoverControllerDelegate&gt;

@property (weak, nonatomic) IBOutlet UIButton *dateButton;
@property (strong, nonatomic) NSDate *currentDate;
@property (strong, nonatomic) NSDateFormatter *dateFormatter;
@property (strong, nonatomic) UIPopoverController *chooseTimePopover;

@end
</code></pre>

<p>And in our segue:</p>

<pre><code class="objc">
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ( [segue.identifier isEqualToString:LABDisplayTimePopoverSegueIdentifier]) {

        if (!self.currentDate) {

            self.currentDate = [NSDate date];
        }

        UIStoryboardPopoverSegue *popover = (UIStoryboardPopoverSegue*)segue;
//        popover.popoverController.delegate = self;
        self.chooseTimePopover = popover.popoverController;
        self.chooseTimePopover.delegate = self;

        LABDateViewController *c = (LABDateViewController *)popover.popoverController.contentViewController;

        [c.datePicker setDate:self.currentDate animated:YES];
    }
}
</code></pre>

<p>if you compile this, you will notice that delegate methods are now finally called so one win achieved!, title is updating but&hellip; Oh wait why every time i open popover the date is the same ?! Yes we are half done here in iOS7 at the segue all VC are loaded. In iOS8 viewDidLoad is called after segue, so if you will set breakpoint in this line:</p>

<pre><code class="objc">[c.datePicker setDate:self.currentDate animated:YES];

//by doing in lldb

po c.datePicker 

//you should get 

nil
</code></pre>

<p>So we need one final workaround for this, and there are 2 ways to do that first one:</p>

<p>If you VC do not need to load many variables its a good idea to set some temporary variable that will store the date as long as the viewDidLoad is not called.</p>

<p>Second one:</p>

<p>If you are lazy or you just don&rsquo;t want to change all your code you can do simple trick forcing view to load by putting this line:</p>

<pre><code class="objc">__unused UIView *view = c.view; // or (void)c.view;
</code></pre>

<p>So the final code will looks like that:</p>

<pre><code class="objc">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ( [segue.identifier isEqualToString:LABDisplayTimePopoverSegueIdentifier]) {

        if (!self.currentDate) {

            self.currentDate = [NSDate date];
        }

        UIStoryboardPopoverSegue *popover = (UIStoryboardPopoverSegue*)segue;
//        popover.popoverController.delegate = self;
        self.chooseTimePopover = popover.popoverController;
        self.chooseTimePopover.delegate = self;

        LABDateViewController *c = (LABDateViewController *)popover.popoverController.contentViewController;

        __unused UIView *view = c.view; // or (void)c.view;

        [c.datePicker setDate:self.currentDate animated:YES];
    }
}
</code></pre>

<p>This should fix all the issues related above :) hope some of you will find this helpfull. If you want to test this by yourself, here is the link to <a href="https://github.com/noxytrux/iOS8PopoverIssue">source code</a></p>

<p>Keep in mind this is not an elegant solution, it is more like a temporary workaround for the issue. If you cannot rewrite your segues to <code>UIPopoverPresentationController</code> it is a good idea to put popover loading back to code or use some additional variables in contentViewController to keep your code clean. We can always wait until Apple will put some fix for that.</p>

<p>Ok that&rsquo;s all for today, next time another funny iOS8 problem i encounter during my regular day work.</p>
]]></content>
  </entry>
  
</feed>
