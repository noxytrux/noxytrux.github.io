<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Marcin Pędzimąż]]></title>
  <link href="http://noxytrux.github.io/atom.xml" rel="self"/>
  <link href="http://noxytrux.github.io/"/>
  <updated>2014-12-30T21:25:21+01:00</updated>
  <id>http://noxytrux.github.io/</id>
  <author>
    <name><![CDATA[Marcin Pędzimąż]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced iOS animations]]></title>
    <link href="http://noxytrux.github.io/blog/2014/12/26/advanced-ios-animations/"/>
    <updated>2014-12-26T17:27:15+01:00</updated>
    <id>http://noxytrux.github.io/blog/2014/12/26/advanced-ios-animations</id>
    <content type="html"><![CDATA[<p>This post will be probably very long and will cover a lot about making your app as juicy as possible. Best iOS apps have heavily animated UI and guide users by themselves so today we will talk about how to take advantages of all new xCode features, and how design app or how to use eyes in terms of imagining your app being animated.</p>

<!--more-->


<p>There are some very basic skills that you need to become iOS dev, good knowing of API is a 80% of your success to become good iOS developer. Old wolfs who were starting from 3.2 know what kind of hell we actually have to pass to get today&rsquo;s ARC, IB improvements and much more. But there is something that can make you become one of those ninjas who put his &ldquo;wow&rdquo; effect to every app they touch. Today I will show you how to convert simple record app to something breathtaking. It will be first part of record app tutorial connected with Core Audio (I will talk about CA next time.) but today we focus only on design, interface builder and last but not least animations of user interface.</p>

<p>There are some things that you actually need to learn if you want to survive in iOS world and most of all become a SWAT team member of iOS developers, those things are:</p>

<ul>
<li>Learn GIMP or Photoshop</li>
<li>If you don&rsquo;t want to learn photoshop at least you should know how to import colors, fonts etc.</li>
<li>Buy notepad and some pencils.</li>
<li>Spend a lot time experimenting with UIAnimations and Gesture Recognizers</li>
<li>Read documentation! (even those old 4.X API)</li>
<li>Attend to Hackatons.</li>
<li>Fail a lot :) without that you cannot learn</li>
<li>Take criticism (this one is probably most important)</li>
<li>Learn OpenGL</li>
<li>And much more ;)</li>
</ul>


<p>More time you spend on all of this less time you will need to build an iOS app. Look at the video below i build a project for this post in one day and put even to much animations but i want to show you how to make your app feel alive, and tell user he can interact with it. It gives this feeling of &ldquo;doing something&rdquo; all the time.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/y9o2fGH6oYo" allowfullscreen></iframe></div>


<p>So how i achieve this ? Most of all hard work but there are some key things that will allow you to do the same ;)</p>

<p><b>GIMP</b></p>

<p>Knowing at least one graphic editor will let you save a lot of time and work. Even if you are not a master chief graphic designer with good hand. You can still at least modify or draw your own simple assets. And most important if your UI guy is on vacation and you just need to resize asset, or put some alpha on it you can do it by yourself, common it&rsquo;s not a rocket science.</p>

<p><b>PHOTOSHOP</b></p>

<p>More advanced tool and not cheap but most companies have it so you can still sit with graphic and look how he/she do some stuff or ask him/her how to use some basic functions. e.g: most design are done in photoshop so instead of getting UI image and some guides why not to ask to get PSD so you can import all directly from PSD to xCode by e.g: simply cmd+c/v hex colors or font names and sizes? less work for designer, and for me it&rsquo;s way more elegant and faster to implement.</p>

<p><b>INTERFACE BUILDER</b></p>

<p>Long time ago there was an argument if it&rsquo;s really useful and safe to use IB but today when we have autolayout ? As George Carlin say&rsquo;s - &ldquo;It&rsquo;s bullshit and it&rsquo;s bad for you&rdquo; and i cannot agree more. User IB as much as possible!. There are now so many COOL features that may dramatically speed up your development and decrease lines of code. And as we know less code - better to maintain, debug and of course less bugs. Some features that can save a lot of our work:</p>

<p><code>IB_DESIGNABLE</code> - new feature that allow you to see a preview of your custom control in IB that&rsquo;s a game changer because it&rsquo;s allow you to see some of your work without even opening app on device or simulator.</p>

<p>Take a look IB without designable:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/no_designable.png" width="800"></p>

<p>And with enabled designable controls preview:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/designable.png" width="800"></p>

<p><code>Interface Builder Preview</code> - super cool feature, and one of the most wanted from the time autolayout was introduced. Simply this allow you to see preview of your app layout on ALL selected devices. Again no need to run app and you can see if there are no glitches in your autolayout UI.</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/ib_preview.png" width="800"></p>

<p><code>Assets catalog</code> - Now when we have new iPhones with @3x resolution assets catalog is only place when you can manage all of assets without getting mad. Also it allow you to FINALLY set rendering mode of asset! no more:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;myasset&quot;</span><span class="p">]</span> <span class="nl">imageWithRenderingMode</span><span class="p">:</span><span class="n">UIImageRenderingModeAlwaysTemplate</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also allow you to manage <code>Size Classes</code> And here how it looks:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/image_assets.png" width="800"></p>

<p>Those are one of most used things that will save your day many times. There is of course a lot more but it&rsquo;s time to get to our main topic which is:</p>

<p><b>ANIMATIONS</b></p>

<p>Without them your app will be at least average if you really want to make your app look epic put as much animations as you can, your app need to live otherwise it will die in all those apps that spam appstore day by day</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/deal_with_it.gif" width="800"></p>

<p>But before we start, you need to learn how to &ldquo;see&rdquo; animations in your app. I&rsquo;m always doing sketches so I can visualize how may app will behave like this one:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/sketch_app.jpg" width="800"></p>

<p>If you are lucky and you have designer he can always do it for you or even make some animation using AfterEffects and export to gif or some video. It&rsquo;s always a good thing to have something like this so you will not lose the &ldquo;idea&rdquo; of animation. Ok enough of talking time for some code!</p>

<p>First let&rsquo;s talk how I did this idle spinner animation when app is not used. I saw this kind of loading spinner in some games and I decided to do the same here so app give that feeling of &ldquo;doing something&rdquo; while not used. So first I put some multiple <code>UIView</code> in my container as the each one of them will be animated using simple rotation of it&rsquo;s center</p>

<p>Drawing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//get current context</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//this code moves our circle along view bounds if you decide not to center it.</span>
</span><span class='line'>    <span class="n">CGContextSaveGState</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">offsetX</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">offsetY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//now create a path that will be used for drawing</span>
</span><span class='line'>    <span class="n">CGMutablePathRef</span> <span class="n">arc</span> <span class="o">=</span> <span class="n">CGPathCreateMutable</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//this function retuns path representing arc (piece of pie)</span>
</span><span class='line'>    <span class="n">CGPathAddArc</span><span class="p">(</span><span class="n">arc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">,</span>
</span><span class='line'>                 <span class="nb">self</span><span class="p">.</span><span class="n">radius</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">degreeToRadian</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">startAngle</span><span class="p">),</span> <span class="c1">//see we conver deegree to radians here by deg*M_PI/180.0</span>
</span><span class='line'>                 <span class="n">degreeToRadian</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">endAngle</span><span class="p">),</span>
</span><span class='line'>                 <span class="nb">YES</span><span class="p">);</span> <span class="c1">//clock wise</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//now we need to stroke our arc </span>
</span><span class='line'>    <span class="n">CGPathRef</span> <span class="n">strokedArc</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">CGPathCreateCopyByStrokingPath</span><span class="p">(</span><span class="n">arc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                   <span class="nb">self</span><span class="p">.</span><span class="n">lineWidth</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">kCGLineCapButt</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">kCGLineJoinMiter</span><span class="p">,</span>
</span><span class='line'>                                   <span class="mf">10.0f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//apply path for drawing</span>
</span><span class='line'>    <span class="n">CGContextAddPath</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">strokedArc</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//setup colors</span>
</span><span class='line'>    <span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">fillColor</span><span class="p">.</span><span class="bp">CGColor</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextSetStrokeColorWithColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">strokeColor</span><span class="p">.</span><span class="bp">CGColor</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//and draw</span>
</span><span class='line'>    <span class="n">CGContextDrawPath</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">kCGPathFillStroke</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextRestoreGState</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will give us nicely done arcs in our IB of course we are declaring our view as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">@</span><span class="n">import</span> <span class="n">UIKit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">IB_DESIGNABLE</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ADVArcRotationView</span> : <span class="bp">UIView</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="n">CGFloat</span> <span class="n">offsetX</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="n">CGFloat</span> <span class="n">offsetY</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="n">CGFloat</span> <span class="n">radius</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">fillColor</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">strokeColor</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="n">CGFloat</span> <span class="n">lineWidth</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="n">CGFloat</span> <span class="n">startAngle</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="n">CGFloat</span> <span class="n">endAngle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can see live preview in Interface builder, see <code>IBInspectable</code> ? this allow you to declare variables available from interface builder so you can modify it look without compiling.</p>

<p>Ok so how to animate the views ? there are actually two ways of doing that one by using <code>UIView animateWithDuration</code> or <code>CABasicAnimation</code> from Core Animation. I want to focus today mostly on Core Animation so i will show some simple UIView animations later on, but for now a bit about Core Animation. It&rsquo;s one of the low level frameworks provided by Apple allowing to create animations that can be apply directly on views layers, notice that we are not working on UIView anymore we are going deeper by playing with UIView layer property. <code>CALayer</code> is a lightweight entity used to acutally do drawing for you under the hood. Layer can have sublayers so it’s pretty similar to working with views. The main difference is that you can do some animated drawing which can&rsquo;t be achieved by using UIView  <code>drawRect:</code> method. You can even create your own fully custom layers. Of course there is some magic going under the hood for you. If you read documentation you will notice there is something called presentationLayer this guy hold current view state while animating and this may be useful in some cases. This is also a good moment to tell why iOS works so damn fast, and why doing this kind of animations on Android make some of developers working on it commit suicide; the answer is simple:</p>

<p><b>iOS perform hardware accelerated animations</b> - what does this mean? iOS rendering pipeline is based on OpenGL and its directly connected to whole API (right now they probably doing some Metal SDK transitions to speed up even more some stuff) That&rsquo;s why every thing animated in iOS works so smooth.</p>

<p>Ok time to explain how do we actually animate idle arcs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//collect views from IB using collections</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ADVIdleViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">IBOutletCollection</span><span class="p">(</span><span class="n">ADVArcRotationView</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">arcViews</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating rotation animation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-(</span><span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="p">)</span><span class="nf">generateLayerAnimationWithDuration:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">duration</span>
</span><span class='line'>                                                   <span class="nf">reverse:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">reverse</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//create animation that will modify &quot;transform&quot; property of layer iOS allow to use some build in keywords</span>
</span><span class='line'>  <span class="c1">//like &quot;rotation&quot; or &quot;scale&quot; to build for us whole functions that will interpolate values.</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">rotationAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CAKeyframeAnimation</span> <span class="nl">animationWithKeyPath</span><span class="p">:</span><span class="s">@&quot;transform.rotation&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">rotationValues</span> <span class="o">=</span> <span class="n">reverse</span> <span class="o">?</span> <span class="l">@[@(</span><span class="mf">2.0f</span> <span class="o">*</span> <span class="n">M_PI</span><span class="l">)</span><span class="p">,</span> <span class="mf">@0.0f</span><span class="l">]</span> <span class="o">:</span> <span class="l">@[</span><span class="mf">@0.0f</span><span class="p">,</span> <span class="l">@(</span><span class="mf">2.0f</span> <span class="o">*</span> <span class="n">M_PI</span><span class="l">)]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">rotationAnimation</span> <span class="nl">setValues</span><span class="p">:</span><span class="n">rotationValues</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rotationAnimation</span><span class="p">.</span><span class="n">repeatCount</span> <span class="o">=</span> <span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="n">kADVMaximumAnimationRepeatCount</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//by default animation is removed from layer after finish but we want actually want to keep it so we can find it later.</span>
</span><span class='line'>    <span class="n">rotationAnimation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rotationAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="n">duration</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rotationAnimation</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">rotationAnimation</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying animation to particular view layer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupArcsRoationAnimationsd</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">self</span><span class="p">.</span><span class="n">arcViews</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UIView</span> <span class="o">*</span><span class="n">v</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">arcViews</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">generateLayerAnimationWithDuration</span><span class="p">:</span> <span class="p">(</span><span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="n">kADVMinimumAnimationDuration</span>
</span><span class='line'>                                                                     <span class="nl">reverse</span><span class="p">:</span> <span class="p">((</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">||</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="p">))];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">v</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">anim</span>
</span><span class='line'>                       <span class="nl">forKey</span><span class="p">:</span><span class="n">kADVAnimationKey</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok now because we set us as delegate to animation we have to handle it in this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//get notified that animations is finished</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">animationDidStop:</span><span class="p">(</span><span class="bp">CAAnimation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anim</span>
</span><span class='line'>                <span class="nf">finished:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//loop by all views that are attached</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">v</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">arcViews</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//and get animation for this view layer</span>
</span><span class='line'>        <span class="bp">CAAnimation</span> <span class="o">*</span><span class="n">current</span> <span class="o">=</span> <span class="p">[</span><span class="n">v</span><span class="p">.</span><span class="n">layer</span> <span class="nl">animationForKey</span><span class="p">:</span><span class="n">kADVAnimationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//check if the animation that just complete is the one of the view we are looking for</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">current</span> <span class="o">==</span> <span class="n">anim</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//if so now we can remove it </span>
</span><span class='line'>            <span class="p">[</span><span class="n">v</span><span class="p">.</span><span class="n">layer</span> <span class="nl">removeAnimationForKey</span><span class="p">:</span><span class="n">kADVAnimationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//and setup new one so the whole view will endlessly animates</span>
</span><span class='line'>            <span class="bp">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">generateLayerAnimationWithDuration</span><span class="p">:</span> <span class="p">(</span><span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="n">kADVMinimumAnimationDuration</span>
</span><span class='line'>                                                                         <span class="nl">reverse</span><span class="p">:</span> <span class="p">(</span><span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="n">v</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">anim</span>
</span><span class='line'>                           <span class="nl">forKey</span><span class="p">:</span><span class="n">kADVAnimationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example you can also use regular UIView animation that&rsquo;s how I manage to do this magic echo impulse ring that blinks all the time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//get view from IB</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">ADVArcRotationView</span> <span class="o">*</span><span class="n">impulseView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//animate using regular UIView animation</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupImpulseViewAnimation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//break retain cycle, and safeguard for view release</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="n">__typeof__</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//initial setup hiden super small view</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">impulseView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">impulseView</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mf">0.0001</span><span class="p">,</span> <span class="mf">0.0001</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//firts part</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.7</span>
</span><span class='line'>                          <span class="nl">delay</span><span class="p">:</span><span class="mf">0.0</span>
</span><span class='line'>                        <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionCurveLinear</span>
</span><span class='line'>                     <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                         <span class="c1">//scale it to 80% of size and at this time make it visible </span>
</span><span class='line'>                         <span class="n">weakSelf</span><span class="p">.</span><span class="n">impulseView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>                         <span class="n">weakSelf</span><span class="p">.</span><span class="n">impulseView</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                     <span class="p">}</span> <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                         <span class="c1">//second part</span>
</span><span class='line'>                         <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.3</span>
</span><span class='line'>                                               <span class="nl">delay</span><span class="p">:</span><span class="mf">0.0</span>
</span><span class='line'>                                             <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionCurveLinear</span>
</span><span class='line'>                                          <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                                              <span class="c1">//by the rest time fade it out again and scale to 100% of size</span>
</span><span class='line'>                                              <span class="n">weakSelf</span><span class="p">.</span><span class="n">impulseView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>                                              <span class="n">weakSelf</span><span class="p">.</span><span class="n">impulseView</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                                          <span class="p">}</span> <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                                              <span class="c1">//recursive animation calling itself</span>
</span><span class='line'>                                              <span class="p">[</span><span class="n">weakSelf</span> <span class="n">setupImpulseViewAnimation</span><span class="p">];</span>
</span><span class='line'>                                          <span class="p">}];</span>
</span><span class='line'>                     <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing heartbeat animation is also very simple again we will use <code>CABasicAnimation</code> and the <code>autoreverses</code> property of animation. This will simply reverse animation to its original state automatically.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">applyHeartBeatAnimation:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">apply</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">apply</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">removeAnimationForKey</span><span class="p">:</span><span class="n">kADVHeartBeatAnimationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CABasicAnimation</span> <span class="o">*</span><span class="n">heartBeatAnimation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">heartBeatAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CABasicAnimation</span> <span class="nl">animationWithKeyPath</span><span class="p">:</span><span class="s">@&quot;transform.scale&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">heartBeatAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">heartBeatAnimation</span><span class="p">.</span><span class="n">repeatCount</span> <span class="o">=</span> <span class="n">INFINITY</span><span class="p">;</span>
</span><span class='line'>    <span class="n">heartBeatAnimation</span><span class="p">.</span><span class="n">autoreverses</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">heartBeatAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="mf">@1.0f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">heartBeatAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="mf">@1.15f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">heartBeatAnimation</span>
</span><span class='line'>                      <span class="nl">forKey</span><span class="p">:</span><span class="n">kADVHeartBeatAnimationKey</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When it comes to simple animations that gives wow effect, the one of the most important places in your app is it&rsquo;s menu.
If you build cool and fancy menu users will way more gladly use it even without doing anything just to play with it.</p>

<p>My menu uses new iOS7 feature: animation with spring to be more precise:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">animateWithDuration:</span><span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nv">duration</span>
</span><span class='line'>                      <span class="nf">delay:</span><span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nv">delay</span>
</span><span class='line'>     <span class="nf">usingSpringWithDamping:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">dampingRatio</span>
</span><span class='line'>      <span class="nf">initialSpringVelocity:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">velocity</span>
</span><span class='line'>                    <span class="nf">options:</span><span class="p">(</span><span class="n">UIViewAnimationOptions</span><span class="p">)</span><span class="nv">options</span>
</span><span class='line'>                 <span class="nf">animations:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span><span class="nv">animations</span>
</span><span class='line'>                 <span class="nf">completion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">))</span><span class="nv">completion</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This animations apply spring effect to your animation which in many cases looks super fancy and cool and you can combine this with any other animation it&rsquo;s just something you get for free so why not to use it? the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">openActionMenu</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//reset buttons positions</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIButton</span> <span class="o">*</span><span class="n">btn</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">menuButtons</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">btn</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//if you need proper order of objects from IB and you use OutletCollections which do not guarantee proper order</span>
</span><span class='line'>    <span class="c1">//you may consider of sorting them somehow in this case i simply use tag propety of view to get order i want.</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSSortDescriptor</span> <span class="o">*</span><span class="n">sortDesc</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSSortDescriptor</span> <span class="nl">sortDescriptorWithKey</span><span class="p">:</span><span class="s">@&quot;tag&quot;</span>
</span><span class='line'>                                                               <span class="nl">ascending</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">sortedButtons</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">menuButtons</span> <span class="nl">sortedArrayUsingDescriptors</span><span class="p">:</span><span class="l">@[</span><span class="n">sortDesc</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">delay</span> <span class="o">=</span> <span class="mf">0.1f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//desired buttons location along center</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintValues</span> <span class="o">=</span> <span class="l">@[</span> <span class="l">@[</span><span class="mi">@0</span><span class="p">,</span> <span class="mi">@0</span><span class="l">]</span><span class="p">,</span>
</span><span class='line'>                                   <span class="l">@[</span><span class="mi">@0</span><span class="p">,</span> <span class="mi">@120</span><span class="l">]</span><span class="p">,</span>
</span><span class='line'>                                   <span class="l">@[@(</span><span class="o">-</span><span class="mi">110</span><span class="l">)</span><span class="p">,</span> <span class="mi">@50</span><span class="l">]</span><span class="p">,</span>
</span><span class='line'>                                   <span class="l">@[@(</span><span class="o">-</span><span class="mi">80</span><span class="l">)</span><span class="p">,</span> <span class="l">@(</span><span class="o">-</span><span class="mi">90</span><span class="l">)]</span><span class="p">,</span>
</span><span class='line'>                                   <span class="l">@[</span><span class="mi">@80</span><span class="p">,</span> <span class="l">@(</span><span class="o">-</span><span class="mi">90</span><span class="l">)]</span><span class="p">,</span>
</span><span class='line'>                                   <span class="l">@[</span><span class="mi">@110</span><span class="p">,</span> <span class="mi">@50</span><span class="l">]]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSUInteger</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">sortedButtons</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UIButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="n">sortedButtons</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">values</span> <span class="o">=</span> <span class="n">constraintValues</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//go button by button and animate alpha so they become visible in 1/4 time of animation</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.2</span>
</span><span class='line'>                              <span class="nl">delay</span><span class="p">:</span><span class="n">delay</span>
</span><span class='line'>                            <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionAllowUserInteraction</span>
</span><span class='line'>                         <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                             <span class="n">btn</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                         <span class="p">}</span> <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                         <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//notice we can combine multiple animations to one view as long as they touch different properites</span>
</span><span class='line'>        <span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">0.8</span>
</span><span class='line'>                              <span class="nl">delay</span><span class="p">:</span><span class="n">delay</span>
</span><span class='line'>             <span class="nl">usingSpringWithDamping</span><span class="p">:</span><span class="mf">0.2</span>
</span><span class='line'>              <span class="nl">initialSpringVelocity</span><span class="p">:</span><span class="mf">0.05</span>
</span><span class='line'>                            <span class="nl">options</span><span class="p">:</span><span class="n">UIViewAnimationOptionBeginFromCurrentState</span>
</span><span class='line'>                         <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                             <span class="c1">//apply new position</span>
</span><span class='line'>                             <span class="bp">CGPoint</span> <span class="n">newCenter</span> <span class="o">=</span> <span class="n">btn</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span><span class='line'>                             <span class="n">newCenter</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="p">[</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>                             <span class="n">newCenter</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="p">[</span><span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                             <span class="n">btn</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">newCenter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                         <span class="p">}</span> <span class="nl">completion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                         <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">delay</span> <span class="o">+=</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok we are done with those easy ones now time for some tricky animations. We left two of them, the hole animation that make record button empty inside and arc animation that represent record time animation. (e.g: we get user desired time of recording and he need to fit this time before it run out.)</p>

<p>Each <code>CALayer</code> contains mask property which tells him what could be actually visible. So simply whatever shape you will apply on your layer using this mask will become transparent. In our case we actually need the opposite we want to tell our view what we want to keep not what we want to cut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//mask whole view so at this point it will be fully transparent</span>
</span><span class='line'><span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">basePath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="nl">bezierPathWithRect</span><span class="p">:</span><span class="n">realBounds</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//now prepare path that contain circle as a mask</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//empty mask path</span>
</span><span class='line'><span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">startPath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">viewSize</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">viewSize</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//mask path that contains circle with 20px on each edge</span>
</span><span class='line'><span class="bp">UIBezierPath</span> <span class="o">*</span><span class="n">endPath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">edgeSize</span><span class="p">,</span> <span class="n">edgeSize</span><span class="p">,</span> <span class="n">viewSize</span><span class="o">-</span><span class="n">edgeSize</span><span class="o">*</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">viewSize</span><span class="o">-</span><span class="n">edgeSize</span><span class="o">*</span><span class="mf">2.0</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//do outer join by applying we are cutting a hole in the original path</span>
</span><span class='line'><span class="p">[</span><span class="n">startPath</span> <span class="nl">appendPath</span><span class="p">:</span><span class="n">basePath</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">endPath</span> <span class="nl">appendPath</span><span class="p">:</span><span class="n">basePath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//now prepare our mask layer </span>
</span><span class='line'><span class="bp">CAShapeLayer</span> <span class="o">*</span><span class="n">maskLayer</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CAShapeLayer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="c1">//set it size to whole view </span>
</span><span class='line'><span class="n">maskLayer</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">realBounds</span><span class="p">;</span>
</span><span class='line'><span class="n">maskLayer</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">endPath</span><span class="p">.</span><span class="bp">CGPath</span><span class="p">;</span> <span class="c1">// set fully visible path </span>
</span><span class='line'><span class="n">maskLayer</span><span class="p">.</span><span class="n">fillRule</span> <span class="o">=</span> <span class="n">kCAFillRuleEvenOdd</span><span class="p">;</span> <span class="c1">// this is the key to enable diff cut in both paths shapes</span>
</span><span class='line'><span class="n">maskLayer</span><span class="p">.</span><span class="n">fillColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blackColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//apply mask to layer</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">mask</span> <span class="o">=</span> <span class="n">maskLayer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And because it is also a regular <code>CALayer</code> you can apply animation to it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">CABasicAnimation</span> <span class="o">*</span><span class="n">maskAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CABasicAnimation</span> <span class="nl">animationWithKeyPath</span><span class="p">:</span><span class="n">kADVMaskAnimationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">maskAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="n">startPath</span><span class="p">.</span><span class="bp">CGPath</span><span class="p">;</span>
</span><span class='line'><span class="n">maskAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="n">endPath</span><span class="p">.</span><span class="bp">CGPath</span><span class="p">;</span>
</span><span class='line'><span class="n">maskAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="n">animationDuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">maskLayer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">maskAnimation</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">kADVMaskAnimationKey</span><span class="p">];</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>One more thing, remember that animation apply changes to layer only while animating! if you for example set your layer scale to 0.5 and animate from 0.5 to 1.0 it will go back to 0.5 after animation so your layer need to set proper final value before animating. It&rsquo;s super important so keep this in mind.</p>

<p><b>Custom CALayer</b></p>

<p>My Pie Chart animation inside drilled button is done using custom build <code>CALayer</code> i had to do it because regular <code>CALayer</code> do not allow to animate Bezier path simply, it will interpolate value instead of redrawing it properly. You can find some detailed info about how it is done on <a href="http://blog.pixelingene.com/2012/02/animating-pie-slices-using-a-custom-calayer/">Pixel-in-Gene Blog</a> but the basic idea is to subclass <code>CALayer</code> and overwrite <code>-(void)drawInContext:(CGContextRef)ctx</code> which is called every time property changes. Here is detailed custom pie chart implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawInContext:</span><span class="p">(</span><span class="n">CGContextRef</span><span class="p">)</span><span class="nv">ctx</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">center</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="mf">0.5</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">radius</span> <span class="o">=</span> <span class="n">fminf</span><span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextBeginPath</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">cosf</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">startAngle</span><span class="p">),</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">sinf</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">startAngle</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">clockwise</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">startAngle</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="p">.</span><span class="n">endAngle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGContextAddArc</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">startAngle</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">endAngle</span><span class="p">,</span> <span class="n">clockwise</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextClosePath</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">fillColor</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextSetStrokeColorWithColor</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">clearColor</span><span class="p">].</span><span class="bp">CGColor</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextDrawPath</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">kCGPathFillStroke</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see it&rsquo;s similar to regular <code>drawRect:</code> call but in <code>CALayer</code> we need to tell it actually when to redraw. We do this by overwriting <code>+ (BOOL)needsDisplayForKey:(NSString *)key;</code> method in our custom class. This will tell the layer to redraw every time our color or angle changes even when animated.</p>

<p>Another thing that is done here is automatic animation generation for every property we have. To do this simply overwrite <code>- (id<CAAction>)actionForKey:(NSString *)event</code> and compare the event key with our property by using <code>[event isEqualToString:NSStringFromSelector(@selector(propertyToCompare))]</code> and fire up animation if we detect property that we want to animate.</p>

<p>One more thing&hellip; see the <code>@dynamic</code> keyword on properties instead of automatically generated <code>@synthesize</code> we do this because CoreAnimation will create sub values and dynamically update original one while animating the property. Basically if you used CoreData you should be familiar with it, if not the simplest explanation to <code>@dynamic</code> is that by using it we tell compiler that our <b>setter</b> and <b>getter</b> will be generated outside the class and can be dynamically created instead of static compile time code generation in class.</p>

<p>And that&rsquo;s all for today, as always <a href="https://github.com/noxytrux/AdvancedCoreAnimations">source code</a> available on my github. Next time i will use this code to finish this app using <code>Core Audio</code> as another blog topic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera and iPhone]]></title>
    <link href="http://noxytrux.github.io/blog/2014/12/20/camera-and-iphone/"/>
    <updated>2014-12-20T15:36:32+01:00</updated>
    <id>http://noxytrux.github.io/blog/2014/12/20/camera-and-iphone</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since i wrote last post but it is time to cover another topic. I start seeing more and more Instagram like apps and as i have to put some camera preview in one of the last apps i was developing. I come to idea that is it a good thing to talk about. Basically if you want to use camera in you app you are using <code>UIImagePickerController</code> and in most cases is good enought. But what if you really need some nice custom animations and most of all custom size?</p>

<!--more-->


<p>Yeah you can say that if it comes to this we can use <code>AVCaptureVideoPreviewLayer</code> and this will cover all edge cases with animation and additional decorations , size etc. Ok you are right in this case your code will looks like this and we are done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupCamera</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//setup session</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVCaptureSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">sessionPreset</span> <span class="o">=</span> <span class="n">AVCaptureSessionPresetPhoto</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">videoDevice</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">frontCamera</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">videoInput</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVCaptureDeviceInput</span> <span class="nl">deviceInputWithDevice</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">videoDevice</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="nl">addInput</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">videoInput</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">captureVideoPreviewLayer</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVCaptureVideoPreviewLayer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSession</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">CALayer</span> <span class="o">*</span><span class="n">viewLayer</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">cameraButton</span><span class="p">.</span><span class="n">layer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">viewLayer</span> <span class="nl">setMasksToBounds</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">captureVideoPreviewLayer</span><span class="p">.</span><span class="n">videoGravity</span> <span class="o">=</span> <span class="n">AVLayerVideoGravityResizeAspectFill</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">captureVideoPreviewLayer</span> <span class="n">connection</span><span class="p">]</span> <span class="nl">setVideoOrientation</span><span class="p">:</span> <span class="n">AVCaptureVideoOrientationLandscapeRight</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">captureVideoPreviewLayer</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="n">viewLayer</span> <span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">viewLayer</span> <span class="nl">addSublayer</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">captureVideoPreviewLayer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Start Running the Session</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="n">startRunning</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//fade in </span>
</span><span class='line'>    <span class="bp">CABasicAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CABasicAnimation</span> <span class="nl">animationWithKeyPath</span><span class="p">:</span><span class="s">@&quot;opacity&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="l">@(</span><span class="mi">0</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="l">@(</span><span class="mi">1</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>    <span class="n">anim</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">0.5f</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">captureVideoPreviewLayer</span> <span class="nl">addAnimation</span><span class="p">:</span><span class="n">anim</span> <span class="nl">forKey</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we don&rsquo;t want it to be easy right? well let&rsquo;s say we need some effect like in instagram to make it simple let&rsquo;s use saturation:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/CustomCamera.gif" width="400"></p>

<p>I&rsquo;m using here OpenGL <code>GLKitViewController</code> attached to my rootViewController with some custom shader.</p>

<p>Advantages:</p>

<p>-Fully customizable<br/>
-Whatever size i want<br/>
-Can apply CAAnimation, UIView aniamtion etc<br/>
-It&rsquo;s bloody fast</p>

<p>Of course i&rsquo;m not telling this is the best option possible i saw some benchmarks revealing that Accelerate framework from Apple can win i some cases. This is a good moment to talk about something i saw that many developers that are not involved in gamedev thought that learning OpenGL is wast of time, which is not true as knowing how GPU works and how to program it gives you almost endless possibilities and in many cases the best performance possible. Trust me i&rsquo;m an engineer :)</p>

<p>Ok enought talking show me some code: (I&rsquo;m assuming that you know the basics of OpenGL ES, if not there are some good <a href="http://www.raywenderlich.com/3664/opengl-tutorial-for-ios-opengl-es-2-0">tutorials</a> that explaing it)</p>

<p>Let&rsquo;s start with setting up our scene, we need main controller with some GLKitViewController attached to it by embed segue using container.</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/scene.png" width="700"></p>

<p>Now we need to handle the segue in our main controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">MDPSegueIdentifiers</span><span class="p">.</span><span class="n">customCamera</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MPDCustomCameraViewController</span> <span class="o">*</span><span class="n">cameraController</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">cameraController</span> <span class="o">=</span> <span class="n">cameraController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">decorateCameraController</span><span class="p">:</span><span class="n">cameraController</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">animateCameraController</span><span class="p">:</span><span class="n">cameraController</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">cameraController</span> <span class="n">startCameraCapture</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both function are not important right now. One of it simply animate the camera view and second one mask it to the shape of the circle. Now let&rsquo;s talk about our heart of app.</p>

<p>To render Camera output in OpenGL we need to capture it texture somehow. Gladly Apple AVCaptureSession allow us to bind camera output directly to textures using <a href="http://en.wikipedia.org/wiki/YCbCr">YCbCr</a> color space.</p>

<p>First we need to setup OpenGL view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">EAGLContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAPI</span><span class="p">:</span><span class="n">kEAGLRenderingAPIOpenGLES2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Failed to create ES context&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//create Opengl view we are processing view update on demand so pause the view</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">glView</span> <span class="o">=</span> <span class="p">(</span><span class="bp">GLKView</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">glView</span><span class="p">.</span><span class="n">context</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">context</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">glView</span><span class="p">.</span><span class="n">drawableDepthFormat</span> <span class="o">=</span> <span class="n">GLKViewDrawableDepthFormat24</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">preferredFramesPerSecond</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">glView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">retinaScaleFactor</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">nativeScale</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">contentScaleFactor</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">retinaScaleFactor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_sessionPreset</span> <span class="o">=</span> <span class="n">AVCaptureSessionPreset640x480</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setupGL</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setupAVCapture</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now lets setup AVSession to preapre data capture into 2 textures one containing chroma and second one luma as described in YCbCr spec.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">CVReturn</span> <span class="n">err</span> <span class="o">=</span> <span class="n">CVOpenGLESTextureCacheCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_context</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_videoTextureCache</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error at CVOpenGLESTextureCacheCreate %d&quot;</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//-- Setup Capture Session.</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVCaptureSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="n">beginConfiguration</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//-- Set preset session size.</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="nl">setSessionPreset</span><span class="p">:</span><span class="n">_sessionPreset</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//-- Creata a video device and input from that Device.  Add the input to the capture session.</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">devices</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVCaptureDevice</span> <span class="nl">devicesWithMediaType</span><span class="p">:</span><span class="n">AVMediaTypeVideo</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">AVCaptureDevice</span> <span class="o">*</span> <span class="n">videoDevice</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">AVCaptureDevice</span> <span class="o">*</span><span class="n">device</span> <span class="k">in</span> <span class="n">devices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">device</span> <span class="nl">hasMediaType</span><span class="p">:</span><span class="n">AVMediaTypeVideo</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">device</span> <span class="n">position</span><span class="p">]</span> <span class="o">==</span> <span class="n">AVCaptureDevicePositionFront</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">videoDevice</span> <span class="o">=</span> <span class="n">device</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">videoDevice</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//-- Add the device to the session.</span>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">AVCaptureDeviceInput</span> <span class="o">*</span><span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVCaptureDeviceInput</span> <span class="nl">deviceInputWithDevice</span><span class="p">:</span><span class="n">videoDevice</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="nl">addInput</span><span class="p">:</span><span class="n">input</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//-- Create the output for the capture session.</span>
</span><span class='line'>    <span class="bp">AVCaptureVideoDataOutput</span> <span class="o">*</span> <span class="n">dataOutput</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVCaptureVideoDataOutput</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">dataOutput</span> <span class="nl">setAlwaysDiscardsLateVideoFrames</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span> <span class="c1">// Probably want to set this to NO when recording</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//-- Set to YUV420.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">dataOutput</span> <span class="nl">setVideoSettings</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="nl">dictionaryWithObject</span><span class="p">:[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="n">kCVPixelFormatType_420YpCbCr8BiPlanarFullRange</span><span class="p">]</span>
</span><span class='line'>                                                             <span class="nl">forKey</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCVPixelBufferPixelFormatTypeKey</span><span class="p">]];</span> <span class="c1">// Necessary for manual preview</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set dispatch to be on the main thread so OpenGL can do things with the data</span>
</span><span class='line'>    <span class="p">[</span><span class="n">dataOutput</span> <span class="nl">setSampleBufferDelegate</span><span class="p">:</span><span class="nb">self</span> <span class="nl">queue</span><span class="p">:</span><span class="n">dispatch_get_main_queue</span><span class="p">()];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="nl">addOutput</span><span class="p">:</span><span class="n">dataOutput</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">session</span> <span class="n">commitConfiguration</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code simply setup camera output to render in YCbCr mode which will return in delegate data for 2 textues. Also we setup device to front camera if you want to use Back camera modify this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">AVCaptureDevice</span> <span class="o">*</span> <span class="n">videoDevice</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">AVCaptureDevice</span> <span class="o">*</span><span class="n">device</span> <span class="k">in</span> <span class="n">devices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">device</span> <span class="nl">hasMediaType</span><span class="p">:</span><span class="n">AVMediaTypeVideo</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">device</span> <span class="n">position</span><span class="p">]</span> <span class="o">==</span> <span class="n">AVCaptureDevicePositionFront</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">videoDevice</span> <span class="o">=</span> <span class="n">device</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And replace <code>AVCaptureDevicePositionFront</code> with <code>AVCaptureDevicePositionBack</code>.</p>

<p>Now most important function this one will capture our output and generate new textues for shader every frame.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">captureOutput:</span><span class="p">(</span><span class="bp">AVCaptureOutput</span> <span class="o">*</span><span class="p">)</span><span class="nv">captureOutput</span>
</span><span class='line'><span class="nf">didOutputSampleBuffer:</span><span class="p">(</span><span class="n">CMSampleBufferRef</span><span class="p">)</span><span class="nv">sampleBuffer</span>
</span><span class='line'>       <span class="nf">fromConnection:</span><span class="p">(</span><span class="bp">AVCaptureConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CVReturn</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CVImageBufferRef</span> <span class="n">pixelBuffer</span> <span class="o">=</span> <span class="n">CMSampleBufferGetImageBuffer</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">width</span> <span class="o">=</span> <span class="n">CVPixelBufferGetWidth</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">height</span> <span class="o">=</span> <span class="n">CVPixelBufferGetHeight</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_videoTextureCache</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;No video texture cache&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">cleanUpTextures</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CVOpenGLESTextureCacheCreateTextureFromImage will create GLES texture</span>
</span><span class='line'>    <span class="c1">// optimally from CVImageBufferRef.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Y-plane</span>
</span><span class='line'>    <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">err</span> <span class="o">=</span> <span class="n">CVOpenGLESTextureCacheCreateTextureFromImage</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">_videoTextureCache</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">GL_TEXTURE_2D</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">GL_RED_EXT</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">width</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">height</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">GL_RED_EXT</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="o">&amp;</span><span class="n">_lumaTexture</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error at CVOpenGLESTextureCacheCreateTextureFromImage %d&quot;</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">CVOpenGLESTextureGetTarget</span><span class="p">(</span><span class="n">_lumaTexture</span><span class="p">),</span> <span class="n">CVOpenGLESTextureGetName</span><span class="p">(</span><span class="n">_lumaTexture</span><span class="p">));</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// UV-plane</span>
</span><span class='line'>    <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">err</span> <span class="o">=</span> <span class="n">CVOpenGLESTextureCacheCreateTextureFromImage</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">_videoTextureCache</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">GL_TEXTURE_2D</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">GL_RG_EXT</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">),</span>
</span><span class='line'>                                                       <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">),</span>
</span><span class='line'>                                                       <span class="n">GL_RG_EXT</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                                       <span class="o">&amp;</span><span class="n">_chromaTexture</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error at CVOpenGLESTextureCacheCreateTextureFromImage %d&quot;</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">CVOpenGLESTextureGetTarget</span><span class="p">(</span><span class="n">_chromaTexture</span><span class="p">),</span> <span class="n">CVOpenGLESTextureGetName</span><span class="p">(</span><span class="n">_chromaTexture</span><span class="p">));</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rendering is quiet simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">glkView:</span><span class="p">(</span><span class="bp">GLKView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span> <span class="nf">drawInRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">glViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>               <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="nb">self</span><span class="p">.</span><span class="n">retinaScaleFactor</span><span class="p">,</span>
</span><span class='line'>               <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="nb">self</span><span class="p">.</span><span class="n">retinaScaleFactor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glClearColor</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">,</span> <span class="mf">0.5f</span><span class="p">,</span> <span class="mf">0.5f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">_lumaTexture</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">_chromaTexture</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glUseProgram</span><span class="p">(</span><span class="n">_shaderProgram</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glBindTexture</span><span class="p">(</span><span class="n">CVOpenGLESTextureGetTarget</span><span class="p">(</span><span class="n">_lumaTexture</span><span class="p">),</span> <span class="n">CVOpenGLESTextureGetName</span><span class="p">(</span><span class="n">_lumaTexture</span><span class="p">));</span>
</span><span class='line'>        <span class="n">glUniform1i</span><span class="p">(</span><span class="n">_tex1Uniform</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glBindTexture</span><span class="p">(</span><span class="n">CVOpenGLESTextureGetTarget</span><span class="p">(</span><span class="n">_chromaTexture</span><span class="p">),</span> <span class="n">CVOpenGLESTextureGetName</span><span class="p">(</span><span class="n">_chromaTexture</span><span class="p">));</span>
</span><span class='line'>        <span class="n">glUniform1i</span><span class="p">(</span><span class="n">_tex2Uniform</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">_matrixUniform</span><span class="p">,</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span><span class="n">GLKMatrix4MakeRotation</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glUniform1f</span><span class="p">(</span><span class="n">_saturationUniform</span><span class="p">,</span> <span class="n">_saturation</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glDisable</span><span class="p">(</span><span class="n">GL_DEPTH_TEST</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">squareVertices</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">textureVertices</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLE_STRIP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simply set the viewport to whole view size and fireup shader that combines both textures into final color.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">mediump</span> <span class="k">vec3</span> <span class="n">yuv</span><span class="p">;</span>
</span><span class='line'><span class="k">mediump</span> <span class="k">vec3</span> <span class="n">rgb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">yuv</span><span class="p">.</span><span class="n">x</span>  <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">SamplerY</span><span class="p">,</span> <span class="n">texCoordVarying</span><span class="p">).</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="n">yuv</span><span class="p">.</span><span class="n">yz</span> <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">SamplerUV</span><span class="p">,</span> <span class="n">texCoordVarying</span><span class="p">).</span><span class="n">rg</span> <span class="o">-</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">rgb</span> <span class="o">=</span> <span class="k">mat3</span><span class="p">(</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span>
</span><span class='line'>            <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">.18732</span><span class="p">,</span> <span class="mf">1.8556</span><span class="p">,</span>
</span><span class='line'>            <span class="mf">1.57481</span><span class="p">,</span> <span class="o">-</span><span class="mf">.46813</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">yuv</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One more thing thanks to shaders and realtime computing i was eg able to do relatime saturation filter, filter itself is quiet simple. You just take a output color as vector3 and get as result dot product of the color and some precomuted constant value vector</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">mediump</span> <span class="k">vec3</span> <span class="n">gray</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">rgb</span><span class="p">,</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">0.2126</span><span class="p">,</span> <span class="mf">0.7152</span><span class="p">,</span> <span class="mf">0.0722</span><span class="p">)));</span>
</span><span class='line'><span class="k">mediump</span> <span class="k">vec3</span> <span class="n">outColor</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">rgb</span><span class="p">,</span> <span class="n">gray</span><span class="p">,</span> <span class="n">saturationFactor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>See that we use uniform to mix between gray and output color.</p>

<p>And that&rsquo;s all i&#8217;v got for today as always <A HREF="https://github.com/noxytrux/CustomCameraiPhone">full source code</A> available on my github. As you can see now you can apply multiple effects on you camera simply by writing some additional shaders or extending current one, and all works in realtime.</p>

<p>P.S. Remember that you need to run this on physical device to use camera as it is not available on simulator.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 weirdness Part4: URLSessionTask]]></title>
    <link href="http://noxytrux.github.io/blog/2014/10/05/ios8-weirdness-part4-urlsessiontask/"/>
    <updated>2014-10-05T16:25:48+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/10/05/ios8-weirdness-part4-urlsessiontask</id>
    <content type="html"><![CDATA[<p>This post is one of those short ones. Again I&rsquo;m confused how switching from one iOS to another may transform your day to a horror. So what is this all about, if you are typical user of <code>NSURLConnection</code> you should acutally know that Apple introduces <code>NSURLSession</code> as a new way to handle networking. And if somethings goes wrong you need to handle it somehow&hellip;</p>

<!--more-->


<p>And this is where all things starting to be tricky; typically in iOS7 when you get an error from your request you handle it in some fail block passing <code>NSError</code> so my today talk is actually about <code>NSError</code>. Sometimes you need to handle paritcular error in way that is more readable for your user eg.: connecting to VPN, Timeouting etc. So let&rsquo;s say the error that is contained in <code>NSError</code> class need to be modified to something more readable eg by using CODE and DOMAIN to specify what we should actually show to the user. But in most of cases NSError contains quiet good description and it&rsquo;s even localized! But not in iOS8&hellip;</p>

<p>Some time ago i saw empty <code>UIAlertView</code> in some of the app i was working on. So i start digging what acutally happens, few minutes with debugger show me that <code>NSURLSessionTask</code> retuns <code>NSError</code> if something fails but it do not contains <code>NSLocalizedDescriptionKey</code> in userInfo the key is acutally missing! And using localizedDescription property also retuns some very unfriendly messages. So lets see what you will see in debugger:</p>

<p>iOS7.1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">po</span> <span class="n">self</span><span class="p">.</span><span class="n">userInfo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSErrorFailingURLKey</span> <span class="o">=</span> <span class="s">&quot;https://yourservername.com:8080/login/&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSErrorFailingURLStringKey</span> <span class="o">=</span> <span class="s">&quot;https://yourservername.com:8080/login/&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLocalizedDescription</span> <span class="o">=</span> <span class="s">&quot;A server with the specified hostname could not be found.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSUnderlyingError</span> <span class="o">=</span> <span class="s">&quot;Error Domain=kCFErrorDomainCFNetwork Code=-1003 </span><span class="se">\&quot;</span><span class="s">A server with the specified hostname could not be found.</span><span class="se">\&quot;</span><span class="s"> UserInfo=0x7ce56df0 {NSErrorFailingURLKey=https://yourservername.com:8080/login/, NSErrorFailingURLStringKey=https://yourservername.com:8080/login/, NSLocalizedDescription=A server with the specified hostname could not be found.}&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we can find <code>NSLocalizedDescription</code> ther. Now let&rsquo;s try to run same code on iOS8:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">po</span> <span class="n">self</span><span class="p">.</span><span class="n">userInfo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSErrorFailingURLKey</span> <span class="o">=</span> <span class="s">&quot;https://yourservername.com:8080/login/&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSErrorFailingURLStringKey</span> <span class="o">=</span> <span class="s">&quot;https://yourservername.com:8080/login/&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSUnderlyingError</span> <span class="o">=</span> <span class="s">&quot;Error Domain=kCFErrorDomainCFNetwork Code=-1003 </span><span class="se">\&quot;</span><span class="s">The operation couldn\U2019t be completed. (kCFErrorDomainCFNetwork error -1003.)</span><span class="se">\&quot;</span><span class="s"> UserInfo=0x7c31fad0 {_kCFStreamErrorDomainKey=12, _kCFStreamErrorCodeKey=8}&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="s">&quot;_kCFStreamErrorCodeKey&quot;</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>    <span class="s">&quot;_kCFStreamErrorDomainKey&quot;</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As i said no <code>NSLocalizedDescription</code> at all, the worst thing is that no matter error your connection will generate, it will be always called the same <b>&ldquo;The operation couldn&rsquo;t be completed.&rdquo;</b> So if you have some production build and you try to get some info from your user, you are in serious trouble. The only way to fix this for now is to build some extension that will convert CODE and DOMAIN to apropriate error message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">@</span><span class="n">import</span> <span class="n">UIKit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//some typical error codes</span>
</span><span class='line'><span class="k">const</span> <span class="bp">NSInteger</span> <span class="n">kServerNotFoundCode</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1003</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="bp">NSInteger</span> <span class="n">kVPNCode</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1005</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="bp">NSInteger</span> <span class="n">kTimeoutCode</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1001</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">NSError</span> <span class="nl">(Utilities)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getDisplayTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span> <span class="k">__autoreleasing</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">message:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span> <span class="k">__autoreleasing</span> <span class="o">*</span><span class="p">)</span><span class="nv">message</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;error_label_title&quot;</span><span class="p">,</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">domain</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">NSURLErrorDomain</span><span class="p">]</span> <span class="o">==</span> <span class="nb">YES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">switch</span><span class="p">(</span> <span class="nb">self</span><span class="p">.</span><span class="n">code</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">case</span> <span class="nl">kVPNCode</span> <span class="p">:</span>
</span><span class='line'>                  <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;error_label_message_vpnnotenabled&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">case</span> <span class="nl">kServerNotFoundCode</span><span class="p">:</span>
</span><span class='line'>                  <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;error_label_message_servernotfound&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">case</span> <span class="nl">kTimeoutCode</span><span class="p">:</span>
</span><span class='line'>                  <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;error_label_message_requesttimeout&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="k">case</span> <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                      <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">;</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// unknow error or we don&#39;t know how to handle this display ugly info.</span>
</span><span class='line'>           <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And how to use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">failWithError:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">,</span> <span class="o">*</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">error</span> <span class="nl">getDisplayTitle</span><span class="p">:</span><span class="o">&amp;</span><span class="n">title</span>
</span><span class='line'>                 <span class="nl">message</span><span class="p">:</span><span class="o">&amp;</span><span class="n">message</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="n">title</span>
</span><span class='line'>                                                    <span class="nl">message</span><span class="p">:</span><span class="n">message</span>
</span><span class='line'>                                                   <span class="nl">delegate</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>                                          <span class="nl">cancelButtonTitle</span><span class="p">:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;error_label_ok&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                          <span class="nl">otherButtonTitles</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you may need to handle way more cases here so it is good to check all <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Constants/Reference/reference.html#//apple_ref/doc/uid/TP40003793-CH3g-SW40">code list</a> in documentation. In this example im using localization to support multiple languages by myself if you do not need to do that just simply type there your description.</p>

<p>And that&#8217;a all for today, next time some swift cool features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Godrays for mobile devices]]></title>
    <link href="http://noxytrux.github.io/blog/2014/10/04/godrays-for-mobile-devices/"/>
    <updated>2014-10-04T18:00:41+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/10/04/godrays-for-mobile-devices</id>
    <content type="html"><![CDATA[<p>This time I want to talk about one of the best postprocess effect I saw in games. It&rsquo;s called <code>Godrays</code> or <code>Lightshafts</code> depents on people I&rsquo;m calling it godrays. Basically it&rsquo;s one of the most challenging effects due to it&rsquo;s horsepower consumption. Today i will show you how to implement low cost Godrays for your mobile game (or PC).</p>

<!--more-->


<p>After correct implementation you should see something like that:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/godrays_image.png" width="800"></p>

<p>Awesome isn&rsquo;t it? Everything you see comes from my custom 3D engine that i build some time ago and now i did some finetunings to see how much i can achieve with current mobile phones generation. Demo runs at stable 30FPS having godrays, shadows, full physic etc. If there are any heavy calculations im using dynamic viewport scalling to drop down pixels and save some CPU and GPU calculations.</p>

<p>But enought talking time to show some code, ah before we start keep in mind this is OpenGL ES 2.0 implementation and you can do it even better and faster using ES 3.0 which contains MRT (multiple render target) to save some render passes.</p>

<p>First we need to implement our FBO to store dynamic textures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;OpenGLES/EAGL.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;OpenGLES/ES2/gl.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;OpenGLES/ES2/glext.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define glBindVertexArray glBindVertexArrayOES</span>
</span><span class='line'><span class="cp">#define glGenVertexArrays glGenVertexArraysOES</span>
</span><span class='line'><span class="cp">#define glDeleteVertexArrays glDeleteVertexArraysOES</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef FBO_H</span>
</span><span class='line'><span class="cp">#define FBO_H</span>
</span><span class='line'><span class="k">enum</span> <span class="n">MRT_TYPE</span> <span class="p">{</span> <span class="n">FBO_2D_COLOR</span><span class="p">,</span> <span class="n">FBO_CUBE_COLOR</span><span class="p">,</span> <span class="n">FBO_2D_DEPTH</span><span class="p">,</span> <span class="n">FBO_2D_DEPTH2</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MRT_TYPE</span>   <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>           <span class="n">format</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GLenum</span>     <span class="n">m_eAttachment</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GLenum</span>     <span class="n">eTarget</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">MRTLayer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FrameBufferObject</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">MRTLayer</span> <span class="n">own</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FrameBufferObject</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">FrameBufferObject</span><span class="p">()</span> <span class="p">{</span><span class="n">Destroy</span><span class="p">();}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Add</span><span class="p">(</span><span class="n">MRTLayer</span> <span class="n">Current</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">CreateNormal</span><span class="p">(</span><span class="n">MRT_TYPE</span> <span class="n">type</span><span class="p">,</span> <span class="kt">int</span> <span class="n">format</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">width</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">CreateDepth</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">width</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">Create</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">width</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">Destroy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">Begin</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">nFace</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">End</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">nFace</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">Bind</span><span class="p">(</span><span class="n">GLint</span> <span class="n">unit</span><span class="p">,</span> <span class="n">GLint</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">Unbind</span><span class="p">(</span><span class="n">GLint</span> <span class="n">unit</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">GLuint</span> <span class="nf">getTextureHandle</span><span class="p">(</span><span class="kt">int</span> <span class="n">what</span><span class="p">)</span>   <span class="p">{</span><span class="k">return</span> <span class="n">m_nTexId</span><span class="p">;}</span>
</span><span class='line'>  <span class="n">GLuint</span> <span class="nf">getWidth</span><span class="p">()</span>     <span class="p">{</span><span class="k">return</span> <span class="n">m_nWidth</span><span class="p">;}</span>
</span><span class='line'>  <span class="n">GLuint</span> <span class="nf">getHeight</span><span class="p">()</span>    <span class="p">{</span><span class="k">return</span> <span class="n">m_nHeight</span><span class="p">;}</span>
</span><span class='line'>  <span class="kt">bool</span>   <span class="nf">isError</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="o">!</span><span class="n">m_bUseFBO</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="nf">CheckStatus</span><span class="p">();</span>
</span><span class='line'>    <span class="n">GLuint</span>     <span class="n">m_nTexId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">bool</span>        <span class="n">m_bUseFBO</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span>        <span class="n">m_bUseDepthBuffer</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">GLuint</span>       <span class="n">m_nWidth</span><span class="p">,</span> <span class="n">m_nHeight</span><span class="p">;</span>
</span><span class='line'>  <span class="n">GLuint</span>       <span class="n">m_nFrameBufferHandle</span><span class="p">;</span>
</span><span class='line'>  <span class="n">GLuint</span>       <span class="n">m_nDepthBufferHandle</span><span class="p">;</span>
</span><span class='line'>  <span class="n">GLenum</span>       <span class="n">m_eTextureType</span><span class="p">;</span>
</span><span class='line'>  <span class="n">GLuint</span>      <span class="n">m_oldBuffer</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is acutally a cpp code because i port it from my old 3D Engine i did when i was working on windows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;FrameBufferObject.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">FrameBufferObject</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">m_nFrameBufferHandle</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nDepthBufferHandle</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nTexId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_bUseFBO</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_oldBuffer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">Destroy</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glDeleteTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glDeleteFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nFrameBufferHandle</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">m_bUseDepthBuffer</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glDeleteRenderbuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nDepthBufferHandle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m_nFrameBufferHandle</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nDepthBufferHandle</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nTexId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_bUseFBO</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">Add</span><span class="p">(</span><span class="n">MRTLayer</span> <span class="n">Current</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">own</span> <span class="o">=</span> <span class="n">Current</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">Begin</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">nFace</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">nFace</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_nWidth</span><span class="p">,</span> <span class="n">m_nHeight</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      
</span><span class='line'>      <span class="n">glGetIntegerv</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER_BINDING</span><span class="p">,</span> <span class="p">(</span><span class="n">GLint</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">m_oldBuffer</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">m_nFrameBufferHandle</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">End</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">nFace</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">m_oldBuffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">Bind</span><span class="p">(</span><span class="n">GLint</span> <span class="n">unit</span><span class="p">,</span> <span class="n">GLint</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span> <span class="o">+</span> <span class="n">unit</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glEnable</span><span class="p">(</span><span class="n">m_eTextureType</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindTexture</span><span class="p">(</span><span class="n">m_eTextureType</span><span class="p">,</span> <span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">Unbind</span><span class="p">(</span><span class="n">GLint</span> <span class="n">unit</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span> <span class="o">+</span> <span class="n">unit</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindTexture</span><span class="p">(</span> <span class="n">m_eTextureType</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">glDisable</span><span class="p">(</span><span class="n">m_eTextureType</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">width</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">height</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">CreateNormal</span><span class="p">(</span><span class="n">MRT_TYPE</span> <span class="n">type</span><span class="p">,</span> <span class="kt">int</span> <span class="n">format</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">width</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">own</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>  <span class="n">own</span><span class="p">.</span><span class="n">format</span> <span class="o">=</span> <span class="n">format</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">m_nWidth</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nHeight</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_bUseFBO</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_bUseDepthBuffer</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_eTextureType</span> <span class="o">=</span> <span class="n">GL_TEXTURE_2D</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//this is very important on mobile devices! you need to keep tracking</span>
</span><span class='line'>  <span class="c1">//original FBO that iOS creates for you while rendering scene.</span>
</span><span class='line'>  <span class="n">glGetIntegerv</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER_BINDING</span><span class="p">,</span> <span class="p">(</span><span class="n">GLint</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">m_oldBuffer</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  <span class="n">glGenRenderbuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nDepthBufferHandle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glBindRenderbuffer</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">m_nDepthBufferHandle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glRenderbufferStorage</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">GL_DEPTH_COMPONENT16</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindRenderbuffer</span><span class="p">(</span><span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_GENERATE_MIPMAP</span><span class="p">,</span> <span class="n">GL_TRUE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">format</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>  <span class="n">GL_RGBA</span> <span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">glGenFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nFrameBufferHandle</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">m_nFrameBufferHandle</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">m_nTexId</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glFramebufferRenderbuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_DEPTH_ATTACHMENT</span><span class="p">,</span> <span class="n">GL_RENDERBUFFER</span><span class="p">,</span> <span class="n">m_nDepthBufferHandle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CheckStatus</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">m_oldBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">CreateDepth</span><span class="p">(</span><span class="n">GLuint</span> <span class="n">width</span><span class="p">,</span> <span class="n">GLuint</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">m_nWidth</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nHeight</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">glGetIntegerv</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER_BINDING</span><span class="p">,</span> <span class="p">(</span><span class="n">GLint</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">m_oldBuffer</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glTexParameterf</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_DEPTH_STENCIL_OES</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span>
</span><span class='line'>                 <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">GL_DEPTH_STENCIL_OES</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">GL_UNSIGNED_INT_24_8_OES</span><span class="p">,</span>
</span><span class='line'>                 <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glGenFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m_nFrameBufferHandle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">m_nFrameBufferHandle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_DEPTH_ATTACHMENT</span><span class="p">,</span> <span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">m_nTexId</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CheckStatus</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">m_oldBuffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">FrameBufferObject</span><span class="o">::</span><span class="n">CheckStatus</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">glCheckFramebufferStatus</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">GL_FRAMEBUFFER_COMPLETE</span><span class="p">:</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;GL_FRAMEBUFFER_COMPLETE_EXT &quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">case</span> <span class="nl">GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT</span><span class="p">:</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT &quot;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">case</span> <span class="nl">GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</span><span class="p">:</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT &quot;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if TARGET_OS_IPHONE </span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS</span><span class="p">:</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT &quot;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">GL_FRAMEBUFFER_UNSUPPORTED</span><span class="p">:</span>
</span><span class='line'>          <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;GL_FRAMEBUFFER_UNSUPPORTED_EXT &quot;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need some code that will help us render, find and transform sun position to screen space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//this should be somehow dynamic but it&#39;s tutorial so I&#39;m hardcoding this :)</span>
</span><span class='line'><span class="kt">float</span> <span class="n">GODRAY_X</span> <span class="o">=</span> <span class="mi">568</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">GODRAY_Y</span> <span class="o">=</span> <span class="mi">320</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">RETINA_SCALE</span> <span class="o">=</span> <span class="mf">2.0f</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">shaftX</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">shaftY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">GLfloat</span> <span class="n">squareVertices</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">GODRAY_X</span><span class="p">,</span> <span class="o">-</span><span class="n">GODRAY_Y</span><span class="p">,</span>
</span><span class='line'>    <span class="n">GODRAY_X</span><span class="p">,</span> <span class="o">-</span><span class="n">GODRAY_Y</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="n">GODRAY_X</span><span class="p">,</span>  <span class="n">GODRAY_Y</span><span class="p">,</span>
</span><span class='line'>    <span class="n">GODRAY_X</span><span class="p">,</span>  <span class="n">GODRAY_Y</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">GLfloat</span> <span class="n">textureVertices</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span>
</span><span class='line'>    <span class="mf">1.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span>
</span><span class='line'>    <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span>
</span><span class='line'>    <span class="mf">1.0f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now create our FBO that will keep depth and 2 another that will compose the final image by blurring downscaled image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">FrameBufferObject</span> <span class="o">*</span><span class="n">FBO</span><span class="p">;</span>
</span><span class='line'><span class="n">FrameBufferObject</span> <span class="o">*</span><span class="n">BFBO</span><span class="p">;</span>
</span><span class='line'><span class="n">FrameBufferObject</span> <span class="o">*</span><span class="n">BFBO2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">FBO</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameBufferObject</span><span class="p">;</span>
</span><span class='line'><span class="n">FBO</span><span class="o">-&gt;</span><span class="n">CreateDepth</span><span class="p">(</span><span class="n">GODRAY_X</span><span class="p">,</span> <span class="n">GODRAY_Y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">BFBO</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameBufferObject</span><span class="p">;</span>
</span><span class='line'><span class="n">BFBO</span><span class="o">-&gt;</span><span class="n">CreateNormal</span><span class="p">(</span><span class="n">FBO_2D_COLOR</span><span class="p">,</span> <span class="n">GL_RGBA</span><span class="p">,</span> <span class="n">GODRAY_X</span><span class="p">,</span> <span class="n">GODRAY_Y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">BFBO2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameBufferObject</span><span class="p">;</span>
</span><span class='line'><span class="n">BFBO2</span><span class="o">-&gt;</span><span class="n">CreateNormal</span><span class="p">(</span><span class="n">FBO_2D_COLOR</span><span class="p">,</span> <span class="n">GL_RGBA</span><span class="p">,</span> <span class="n">GODRAY_X</span><span class="p">,</span> <span class="n">GODRAY_Y</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember to dispose resources in dealloc!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">FBO</span><span class="o">-&gt;</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>    <span class="n">delete</span> <span class="n">FBO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BFBO</span><span class="o">-&gt;</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>    <span class="n">delete</span> <span class="n">BFBO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BFBO2</span><span class="o">-&gt;</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>    <span class="n">delete</span> <span class="n">BFBO2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now time to prepare data, render objects to FBO and compose it to final image</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">getLightScreenCoor</span><span class="p">(</span><span class="n">xVec3</span> <span class="n">light</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">uniformLightX</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&amp;</span><span class="n">uniformLightY</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">viewport</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GODRAY_X</span><span class="p">,</span> <span class="n">GODRAY_Y</span><span class="p">};</span>
</span><span class='line'>    <span class="n">GLKVector3</span> <span class="n">msun</span> <span class="o">=</span> <span class="n">GLKVector3Make</span><span class="p">(</span><span class="n">light</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">light</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">light</span><span class="p">.</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GLKVector3</span> <span class="n">win</span> <span class="o">=</span> <span class="n">GLKMathProject</span><span class="p">(</span><span class="n">msun</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">ModelView</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">Projection</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">viewport</span><span class="p">);</span>
</span><span class='line'>  <span class="n">uniformLightX</span> <span class="o">=</span> <span class="n">win</span><span class="p">.</span><span class="n">x</span><span class="o">/</span><span class="n">GODRAY_X</span><span class="p">;</span>
</span><span class='line'>  <span class="n">uniformLightY</span> <span class="o">=</span> <span class="n">win</span><span class="p">.</span><span class="n">y</span><span class="o">/</span><span class="n">GODRAY_Y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">glkView:</span><span class="p">(</span><span class="bp">GLKView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span> <span class="nf">drawInRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glClearColor</span><span class="p">(</span><span class="mf">0.65f</span><span class="p">,</span> <span class="mf">0.65f</span><span class="p">,</span> <span class="mf">0.65f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">FBO</span><span class="o">-&gt;</span><span class="n">Begin</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//render your objects here and store their depth   </span>
</span><span class='line'>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="n">FBO</span><span class="o">-&gt;</span><span class="n">End</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="n">RETINA_SCALE</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="n">RETINA_SCALE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//NOW RENDER YOUR DATA AGAIN TO OUTPUT FBO</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//PROPER LIGHTSHAFTS RENDERING</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//1st get sun direction vector, find it&#39;s position in 3D space and convert to 2D position</span>
</span><span class='line'>    <span class="n">xVec3</span> <span class="n">Sun</span> <span class="o">=</span> <span class="n">xVec3</span><span class="p">(</span><span class="o">-</span><span class="mf">0.291719</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.951882</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.093922</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">sunsize</span> <span class="o">=</span> <span class="mf">1.23</span> <span class="o">*</span> <span class="mi">9000</span> <span class="o">-</span> <span class="mi">4000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Sun</span> <span class="o">*=</span> <span class="n">sunsize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//get 2D position</span>
</span><span class='line'>    <span class="n">getLightScreenCoor</span><span class="p">(</span><span class="n">Sun</span><span class="p">,</span> <span class="n">shaftX</span><span class="p">,</span> <span class="n">shaftY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Sun</span><span class="p">.</span><span class="n">normalize</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">dotlight</span> <span class="o">=</span> <span class="n">eyeDirection</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">Sun</span><span class="p">);</span> <span class="c1">//THIS IS USEFULL FOR CALCUALTING HOW MUCH GOD RAYS POSTPROCESS WE WANT TO APPLY</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Projection</span> <span class="o">=</span> <span class="n">GLKMatrix4MakeOrtho</span><span class="p">(</span><span class="o">-</span><span class="n">GODRAY_X</span><span class="p">,</span> <span class="n">GODRAY_X</span><span class="p">,</span> <span class="o">-</span><span class="n">GODRAY_Y</span><span class="p">,</span> <span class="n">GODRAY_Y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1000.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ModelView</span> <span class="o">=</span> <span class="n">GLKMatrix4Identity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//NOW BUILD OUR SHAFTS TEXTURE</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//COMPUTE SHAFTS</span>
</span><span class='line'>        <span class="n">BFBO</span><span class="o">-&gt;</span><span class="n">Begin</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">glUseProgram</span><span class="p">(</span><span class="n">ShaftShader</span><span class="o">-&gt;</span><span class="n">ShaderProgram</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">FBO</span><span class="o">-&gt;</span><span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">ShaftShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_PROJECTION_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">Projection</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">ShaftShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_MODELVIEW_WORLD_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">ModelView</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniform1i</span><span class="p">(</span><span class="n">ShaftShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_TEX0</span><span class="p">],</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniform2f</span><span class="p">(</span><span class="n">ShaftShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_SCREEN_POS</span><span class="p">],</span> <span class="n">shaftX</span><span class="p">,</span> <span class="n">shaftY</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniform1f</span><span class="p">(</span><span class="n">ShaftShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_DOT_LIGHT</span><span class="p">],</span> <span class="n">dotlight</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniform3fv</span><span class="p">(</span><span class="n">ShaftShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_LIGHT_COLOR</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">m_SunColor</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">squareVertices</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">textureVertices</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLE_STRIP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">BFBO</span><span class="o">-&gt;</span><span class="n">End</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//BLUR VERTICALLY</span>
</span><span class='line'>        <span class="n">BFBO2</span><span class="o">-&gt;</span><span class="n">Begin</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">glUseProgram</span><span class="p">(</span><span class="n">blurShaderY</span><span class="o">-&gt;</span><span class="n">ShaderProgram</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">BFBO</span><span class="o">-&gt;</span><span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">blurShaderY</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_PROJECTION_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">Projection</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">blurShaderY</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_MODELVIEW_WORLD_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">ModelView</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glUniform1i</span><span class="p">(</span><span class="n">blurShaderY</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_TEX0</span><span class="p">],</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">squareVertices</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">textureVertices</span><span class="p">);</span>
</span><span class='line'>            <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLE_STRIP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">BFBO2</span><span class="o">-&gt;</span><span class="n">End</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//BLUR HORIZONTALLY AND COMPOSE WITH CURRENT IMAGE</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="n">RETINA_SCALE</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="n">RETINA_SCALE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glBlendFunc</span><span class="p">(</span><span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ONE</span><span class="p">);</span> <span class="c1">//CHANGE TO ADDITIVE BLENDING</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glUseProgram</span><span class="p">(</span><span class="n">blurShaderX</span><span class="o">-&gt;</span><span class="n">ShaderProgram</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">BFBO2</span><span class="o">-&gt;</span><span class="n">m_nTexId</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">blurShaderX</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_PROJECTION_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">Projection</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">blurShaderX</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_MODELVIEW_WORLD_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">ModelView</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glUniform1i</span><span class="p">(</span><span class="n">blurShaderX</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_TEX0</span><span class="p">],</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">squareVertices</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">textureVertices</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_COORDS</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLE_STRIP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//CHANGE BACK TO REGULAR BLEND</span>
</span><span class='line'>        <span class="n">glBlendFunc</span><span class="p">(</span><span class="n">GL_ONE</span><span class="p">,</span><span class="n">GL_ONE_MINUS_SRC_ALPHA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so that&rsquo;s basically all about the code, now we need to talk about shaders beacause they are the 80% of our success here.</p>

<p>As you can see, im rendering to &frac14; of screen to reduce rendering time and pixel shader cost, but it will not look good. So that&rsquo;s why im using blurred image it will hide any glitches that are created by our shafts shader and there is another reason for that. I&rsquo;m using only 15 samples per frame which is terrible low (comparing typically you use around 30-50samples) and makes the screen looks very sharpy and ugly so thats another thing we need to hide. And there is ofcourse another cool feature: we can get some simplified HDRR by doing this.</p>

<p>Blur shaders are simple, you can find this implementation in many places:</p>

<p>HORIZONTAL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">attribute</span> <span class="k">vec4</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'><span class="k">attribute</span> <span class="k">vec2</span> <span class="n">inputTextureCoordinate</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span>    <span class="k">mat4</span> <span class="n">projection</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">mat4</span> <span class="n">modelViewWorld</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">varying</span> <span class="k">vec2</span> <span class="n">vTexCoord</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">gl_Position</span> <span class="o">=</span> <span class="n">projection</span> <span class="o">*</span> <span class="n">modelViewWorld</span> <span class="o">*</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vTexCoord</span> <span class="o">=</span> <span class="n">inputTextureCoordinate</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="k">sampler2D</span> <span class="n">RTScene</span><span class="p">;</span>
</span><span class='line'><span class="k">varying</span> <span class="k">lowp</span> <span class="k">vec2</span> <span class="n">vTexCoord</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="k">lowp</span> <span class="k">float</span> <span class="n">blurSize</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="mf">160.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="k">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">mediump</span> <span class="k">vec4</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="mf">4.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.05</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="mf">3.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.09</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="mf">2.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.15</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.16</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.15</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="mf">2.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="mf">3.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.09</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTScene</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="mf">4.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.05</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>VERTICAL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">attribute</span> <span class="k">vec4</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'><span class="k">attribute</span> <span class="k">vec2</span> <span class="n">inputTextureCoordinate</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span>    <span class="k">mat4</span> <span class="n">projection</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">mat4</span> <span class="n">modelViewWorld</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">varying</span> <span class="k">vec2</span> <span class="n">vTexCoord</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">gl_Position</span> <span class="o">=</span> <span class="n">projection</span> <span class="o">*</span> <span class="n">modelViewWorld</span> <span class="o">*</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vTexCoord</span> <span class="o">=</span> <span class="n">inputTextureCoordinate</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="k">sampler2D</span> <span class="n">RTBlurH</span><span class="p">;</span>
</span><span class='line'><span class="k">varying</span> <span class="k">lowp</span> <span class="k">vec2</span> <span class="n">vTexCoord</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="k">lowp</span> <span class="k">float</span> <span class="n">blurSize</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="mf">240.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="k">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">mediump</span> <span class="k">vec4</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="mf">4.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.05</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="mf">3.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.09</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="mf">2.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.15</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.16</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.15</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mf">2.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.12</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mf">3.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.09</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">RTBlurH</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">vTexCoord</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mf">4.0</span><span class="o">*</span><span class="n">blurSize</span><span class="p">,</span> <span class="n">vTexCoord</span><span class="p">.</span><span class="n">y</span><span class="p">))</span> <span class="o">*</span> <span class="mf">0.05</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it is time for our main shader, it uses some tricks that allow you to reduce calculation cost:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">attribute</span> <span class="k">vec4</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'><span class="k">attribute</span> <span class="k">vec2</span> <span class="n">inputTextureCoordinate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">uniform</span>    <span class="k">mat4</span> <span class="n">projection</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">mat4</span> <span class="n">modelViewWorld</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">vec2</span> <span class="n">lightSS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">varying</span> <span class="k">vec2</span> <span class="n">textureCoordinate</span><span class="p">;</span>
</span><span class='line'><span class="k">varying</span> <span class="k">vec2</span> <span class="n">lightScreen</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gl_Position</span> <span class="o">=</span> <span class="n">projection</span> <span class="o">*</span> <span class="n">modelViewWorld</span> <span class="o">*</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lightScreen</span> <span class="o">=</span> <span class="n">lightSS</span><span class="p">;</span>
</span><span class='line'>  <span class="n">textureCoordinate</span> <span class="o">=</span> <span class="n">inputTextureCoordinate</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">precision</span> <span class="k">mediump</span> <span class="k">float</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">uniform</span> <span class="k">lowp</span> <span class="k">sampler2D</span> <span class="n">myTexture</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">lowp</span> <span class="k">float</span> <span class="n">dotlight</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">vec3</span> <span class="n">lightColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">varying</span> <span class="k">lowp</span> <span class="k">vec2</span> <span class="n">textureCoordinate</span><span class="p">;</span>
</span><span class='line'><span class="k">varying</span> <span class="k">lowp</span> <span class="k">vec2</span> <span class="n">lightScreen</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//here you can manipulate strenght, distance, and final result but current values should be good enought.</span>
</span><span class='line'><span class="cp">#define Density 0.25</span>
</span><span class='line'><span class="cp">#define Weight 0.3</span>
</span><span class='line'><span class="cp">#define Decay 0.99</span>
</span><span class='line'><span class="cp">#define Exposure 0.15</span>
</span><span class='line'>
</span><span class='line'><span class="k">float</span> <span class="n">illum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'><span class="k">float</span> <span class="n">illuminationDecay</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'><span class="k">vec2</span> <span class="n">deltaTexCoord</span> <span class="o">=</span> <span class="k">vec2</span><span class="p">(</span> <span class="mf">0.0</span> <span class="p">);</span>
</span><span class='line'><span class="k">vec2</span> <span class="n">texCoordp</span> <span class="o">=</span> <span class="k">vec2</span><span class="p">(</span> <span class="mf">0.0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//this value should have exacly same number of Sample_It() calls.</span>
</span><span class='line'><span class="cp">#define NUM_SAMPLES 15.0</span>
</span><span class='line'><span class="k">const</span> <span class="k">float</span> <span class="n">InvNumSamples</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">NUM_SAMPLES</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">Sample_It</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">texCoordp</span> <span class="o">-=</span> <span class="n">deltaTexCoord</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//we need to offset step due to low precision on mobile normaly you should use 1.0</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">sampled</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.99995</span> <span class="p">,</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">myTexture</span><span class="p">,</span><span class="n">texCoordp</span><span class="p">.</span><span class="n">st</span><span class="p">).</span><span class="n">r</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">illum</span> <span class="o">+=</span> <span class="n">sampled</span> <span class="o">*</span> <span class="n">illuminationDecay</span> <span class="o">*</span> <span class="n">Weight</span> <span class="o">*</span> <span class="n">dotlight</span><span class="p">;</span>
</span><span class='line'>    <span class="n">illuminationDecay</span> <span class="o">*=</span> <span class="n">Decay</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">texCoordp</span> <span class="o">=</span> <span class="n">textureCoordinate</span><span class="p">;</span>
</span><span class='line'>  <span class="n">deltaTexCoord</span> <span class="o">=</span> <span class="p">(</span> <span class="n">texCoordp</span> <span class="o">-</span> <span class="n">lightScreen</span> <span class="p">)</span> <span class="o">*</span> <span class="n">InvNumSamples</span> <span class="o">*</span> <span class="n">Density</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">illum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">illuminationDecay</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//1</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//2</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//3</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//4</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//5</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//6</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//7</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//8</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//9</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//10</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//11</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//12</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//13</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//14</span>
</span><span class='line'>    <span class="n">Sample_It</span><span class="p">();</span> <span class="c1">//15</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span> <span class="k">vec3</span><span class="p">(</span> <span class="n">illum</span> <span class="o">*</span> <span class="n">Exposure</span> <span class="p">)</span> <span class="o">*</span> <span class="n">lightColor</span><span class="p">,</span> <span class="mf">1.0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And voila! this will generate image with applied shafts to it. Ok so how it acutally works? <br/>
-You look at depth pixel by pixel  <br/>
-And check if the distance of it is bigger than specified offset (remember GPU saves depth as 0-1)   <br/>
-If there is any object on our way it will return 0 color so we have black pixel there     <br/>
-Otherwise white as we are poiting to infinity, multipled by specified color <br/>
-Repeat this N times (here I&rsquo;m using 15 samples but you may try to modify this eg on iPhone 4S i was using only 10samples ) <br/>
-Each time you repeat shift the result by specified direction vector (our sun position in screen space)</p>

<p>This image should explain this good enought:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/lightshafts-explain.jpg" width="800"></p>

<p>Here we can see final result:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/w6TJuDb0XDo" allowfullscreen></iframe></div>


<p>And that&rsquo;s quiet everything i have today, next time again iOS8 ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS UIButton backgroundColor you do it wrong...]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/25/ios-uibutton-backgroundcolor-you-do-it-wrong-dot-dot-dot/"/>
    <updated>2014-09-25T16:21:30+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/25/ios-uibutton-backgroundcolor-you-do-it-wrong-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>This post is for those who are just starting they journey with iOS and Swift and want to learn some good practices on how to build this nice looking flat UI in modern iOS. Basically i want to talk about rectangle buttons that are filled with color. I saw some really bad implementations of <code>UIButton</code> and now, I want to present you a common mistake, i ofen see in many project even those mature ones.</p>

<!--more-->


<p>This image descibes our tutorial code, we have two button first one is done in bad habit and uses backgroundcolor and second one is done using background image property.</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/look_buttons.png" width="300"></p>

<p>Basically backgroundColor property is good thing to use in Interface Builder to see how the button will looks like. But if you try to manage states you will end up with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">buttonHightlight</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sender</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="p">(</span><span class="ss">red</span><span class="p">:</span> <span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">green</span><span class="p">:</span> <span class="mi">81</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">blue</span><span class="p">:</span> <span class="mi">85</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">alpha</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@IBAction</span> <span class="n">func</span> <span class="n">buttonNormal</span><span class="p">(</span><span class="ss">sender</span><span class="p">:</span> <span class="no">UIButton</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sender</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="p">(</span><span class="ss">red</span><span class="p">:</span> <span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">green</span><span class="p">:</span> <span class="mi">81</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">blue</span><span class="p">:</span> <span class="mi">85</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">alpha</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is event worst because your states in IB looks very similar to this:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/selector_ohno.png" width="300"></p>

<p>Madness and disaster, seriously that&rsquo;s not how you want to build your button, highlight state is build in and it&rsquo;s for free. And of course you only want to call function reponsible for pressing button no additional ones.</p>

<p>To do that we should use backgroundImage property of <code>UIButton</code>, but to not generate any additional assets let&rsquo;s build two extensions. First one will be reponsibe for generating <code>UIImage</code> from <code>UIColor</code> so we can set it directly from code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">import</span> <span class="no">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="no">UIImage</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="n">func</span> <span class="n">imageWithColor</span><span class="p">(</span><span class="ss">color</span><span class="p">:</span><span class="no">UIColor</span><span class="sc">?)</span> <span class="o">-&gt;</span> <span class="no">UIImage</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">rect</span> <span class="o">=</span> <span class="no">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">rect</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">context</span> <span class="o">=</span> <span class="no">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">color</span> <span class="o">=</span> <span class="n">color</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">color</span><span class="o">.</span><span class="n">setFill</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="no">UIColor</span><span class="o">.</span><span class="n">whiteColor</span><span class="p">()</span><span class="o">.</span><span class="n">setFill</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">CGContextFillRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">rect</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">image</span> <span class="o">=</span> <span class="no">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>        <span class="no">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second one is not required but is very usefull, and allow you to copy and paste color from eg gimp or photoshop. We are talking about UIColor extension that allow us to use hexadecimal strings as input value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">import</span> <span class="no">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="no">UIColor</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="n">func</span> <span class="n">colorWithHex</span><span class="p">(</span><span class="ss">hexString</span><span class="p">:</span> <span class="nb">String</span><span class="sc">?)</span> <span class="o">-&gt;</span> <span class="no">UIColor</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">colorWithHex</span><span class="p">(</span><span class="n">hexString</span><span class="p">,</span> <span class="ss">alpha</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="n">func</span> <span class="n">colorWithHex</span><span class="p">(</span><span class="ss">hexString</span><span class="p">:</span> <span class="nb">String</span><span class="sc">?,</span> <span class="ss">alpha</span><span class="p">:</span> <span class="no">CGFloat</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">UIColor</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">hexString</span> <span class="o">=</span> <span class="n">hexString</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">var</span> <span class="n">error</span> <span class="p">:</span> <span class="no">NSError</span><span class="p">?</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">regexp</span> <span class="o">=</span> <span class="no">NSRegularExpression</span><span class="p">(</span><span class="ss">pattern</span><span class="p">:</span> <span class="s2">&quot;</span><span class="se">\\</span><span class="s2">A#[0-9a-f]{6}</span><span class="se">\\</span><span class="s2">z&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">options</span><span class="p">:</span> <span class="o">.</span><span class="n">CaseInsensitive</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">error</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">count</span> <span class="o">=</span> <span class="n">regexp</span><span class="o">.</span><span class="n">numberOfMatchesInString</span><span class="p">(</span><span class="n">hexString</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">options</span><span class="p">:</span> <span class="o">.</span><span class="n">ReportProgress</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">range</span><span class="p">:</span> <span class="no">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">countElements</span><span class="p">(</span><span class="n">hexString</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">count</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">var</span> <span class="n">rgbValue</span> <span class="p">:</span> <span class="no">UInt32</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">scanner</span> <span class="o">=</span> <span class="no">NSScanner</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="n">hexString</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">scanner</span><span class="o">.</span><span class="n">scanLocation</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">scanner</span><span class="o">.</span><span class="n">scanHexInt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rgbValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">let</span> <span class="n">red</span>   <span class="o">=</span> <span class="no">CGFloat</span><span class="p">(</span> <span class="p">(</span><span class="n">rgbValue</span> <span class="o">&amp;</span> <span class="mh">0xFF0000</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">green</span> <span class="o">=</span> <span class="no">CGFloat</span><span class="p">(</span> <span class="p">(</span><span class="n">rgbValue</span> <span class="o">&amp;</span> <span class="mh">0xFF00</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">blue</span>  <span class="o">=</span> <span class="no">CGFloat</span><span class="p">(</span> <span class="p">(</span><span class="n">rgbValue</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="p">)</span> <span class="o">/</span> <span class="mi">255</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="no">UIColor</span><span class="p">(</span><span class="ss">red</span><span class="p">:</span> <span class="n">red</span><span class="p">,</span> <span class="ss">green</span><span class="p">:</span> <span class="n">green</span><span class="p">,</span> <span class="ss">blue</span><span class="p">:</span> <span class="n">blue</span><span class="p">,</span> <span class="ss">alpha</span><span class="p">:</span> <span class="n">alpha</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it, so how do we set our good button ? like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="sr">//</span><span class="n">good</span> <span class="n">button</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">goodButton</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="o">.</span><span class="n">clearColor</span><span class="p">()</span> <span class="sr">//</span><span class="n">reset</span> <span class="no">IB</span> <span class="no">Color</span>
</span><span class='line'><span class="n">goodButton</span><span class="o">.</span><span class="n">setBackgroundImage</span><span class="p">(</span><span class="no">UIImage</span><span class="o">.</span><span class="n">imageWithColor</span><span class="p">(</span><span class="no">UIColor</span><span class="o">.</span><span class="n">colorWithHex</span><span class="p">(</span><span class="s2">&quot;#66D269&quot;</span><span class="p">)),</span> <span class="ss">forState</span><span class="p">:</span> <span class="o">.</span><span class="n">Normal</span><span class="p">)</span>
</span><span class='line'><span class="n">goodButton</span><span class="o">.</span><span class="n">setBackgroundImage</span><span class="p">(</span><span class="no">UIImage</span><span class="o">.</span><span class="n">imageWithColor</span><span class="p">(</span><span class="no">UIColor</span><span class="o">.</span><span class="n">colorWithHex</span><span class="p">(</span><span class="s2">&quot;#66D269&quot;</span><span class="p">,</span> <span class="ss">alpha</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)),</span> <span class="ss">forState</span><span class="p">:</span> <span class="o">.</span><span class="n">Highlighted</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So reassuming, do not use <code>IBAction</code> to modify button color, hightlight state etc. Use backgroundImage and if you don&rsquo;t want to use assets build them from code using extensions. As always <a href="https://github.com/noxytrux/ButtonsGoodPracticeTutorial">source code</a> on my github page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 Weirdness Part3: Laggy UICollectionView]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/25/ios8-weirdness-part3-laggy-uicollectionview/"/>
    <updated>2014-09-25T10:03:36+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/25/ios8-weirdness-part3-laggy-uicollectionview</id>
    <content type="html"><![CDATA[<p>Autolayouts, something that people love and hate. When Apple introduced them i had mixed felling about it, from one hand it reduces tons of code, also do a lot of calculation for you and of course it magically works! In other hand&hellip; it is terribly slow i still see my manual <code>setFrame:</code> at least 10 times faster than calculation something in AL but nothing for free.</p>

<!--more-->


<p></p>

<p>This post will not be long, the main problem is that as most of you may know using autolayout in scrollview is pain in ass terrible slow due to continous autolayout recalculation mostly if you use xib loaded view with AL attached to them. So why not to use UICollectionView better, faster, bigger, stronger. I have heavy collection view with very complicated cells (in terms of autolayout) but they are done pretty smart and work really fast and smooth, of course only in iOS7</p>

<p>After updating my ipad to iOS8 i encounter terrible lags while scrolling <code>UICollectionView</code> in my app. Again instruments bug haunting with tons of coffee shows me that my amazing <code>UICollectionView</code> starts acting exacly like ugly <code>UIScrollView</code> solution and recalculates cells autolayout over and over again!</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/ohcomone.gif"></p>

<p>Gladly solution to that is pretty simple. If you watched <a href="https://developer.apple.com/videos/wwdc/2014/">WWDC 2014</a> about changes in collection view you propably noticed that Apple introduces some new Invaidation Context etc. But we do not need to implement all of that if you want to get your smooth and nice scrolling the only thing you need is to implement this method in your custom <code>UICollectionViewCell</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UICollectionViewLayoutAttributes</span> <span class="o">*</span><span class="p">)</span><span class="nf">preferredLayoutAttributesFittingAttributes:</span><span class="p">(</span><span class="bp">UICollectionViewLayoutAttributes</span> <span class="o">*</span><span class="p">)</span><span class="nv">layoutAttributes</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">layoutAttributes</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you are done! Collection view again works as expected, it happens because this is called before autolayout calcualtion and it returns proper cell size so there is no need to trigger recalcualtion again. You should see some visual changes eg collection view cell will no more weirdly rescale from 1x1 to it desired scale.</p>

<p>That&rsquo;s all for now, next time some UIButton good practices for those who just start coding in iOS and want their flat buttons looks and works good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 Weirdness Part2: Modal ViewController]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/24/ios8-weirdness-part2-modal-viewcontroller/"/>
    <updated>2014-09-24T16:49:51+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/24/ios8-weirdness-part2-modal-viewcontroller</id>
    <content type="html"><![CDATA[<p>As i promised we are continuing werid iOS8 bugs i encounter after update. Last one was funny but this one is a masterpiece. Imagine you have project where your user can type some values eg. add contact, some place or something. We want to help our user by giving him some hints while typing or some predefinied values he can choose from. It is a good idea to present this kind of view as a modal view controller&hellip;</p>

<!--more-->


<p>Imagine my reaction to my stable iOS7 code when my QA guy come to me and said something like this:</p>

<p>&ldquo;Why all our modal view controllers can close by themselves, i mean look if you dismiss popover on that modal view it will close.&rdquo;</p>

<p><img class="right" src="http://noxytrux.github.io/assets/images/whatthehell.gif"></p>

<p>Sounds quiet funny right? How the hell modally showed <code>UIViewController</code> can close just like that without pressing anything. But after few hours of debbuging i was not so happy it actually happend to me! All the time i was dimissing <code>UIPopoverController</code> the modal view was dimissing with this popover! But there is a trick behing this you need to set your view stack like this:</p>

<p><code>UINavigationViewController</code> that holds <code>UIViewController</code> and from here you can open modal <code>UIViewController</code> that contains some containers. In some big project im participating we have some reusable ViewControllers that doing specific things one of it is <code>UIViewController</code> with <code>UITextField</code> in it. If you press on that <code>UITextField</code> a popover will show to help you choose / find some value. So this is how our app looks / works:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/modalOK.gif" width="800"></p>

<p>Pretty simple, so the app opens some modal view and contains this funny component. Ofc this code works fine on iOS7, now if we run this on iOS8 we will see somethings like this:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/modalBAD.gif" width="800"></p>

<p>So wherever user tap outside to dismiss <code>UIPopoverController</code> (i created it from code to avoid <a href="http://noxytrux.github.io/blog/2014/09/17/ios8-weirdness-part1-uipopovercontroller/">latest</a> issues) modal controller also dimiss&hellip; It took me some cups of coffet to recognize what is wrong but before that let&rsquo;s see some code that is responsible for this. I will not describe whole example code just the green <code>UIViewController</code> that is placed using container segue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;MWLContainerViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;MWLCitiesTableViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MWLContainerViewController</span> <span class="p">()</span>
</span><span class='line'><span class="o">&lt;</span><span class="bp">UITextFieldDelegate</span><span class="p">,</span>
</span><span class='line'><span class="bp">UIPopoverControllerDelegate</span><span class="p">,</span>
</span><span class='line'><span class="n">MWLCitiesTableViewControllerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UITextField</span> <span class="o">*</span><span class="n">typeCityTextField</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">UIPopoverController</span> <span class="o">*</span><span class="n">searchPopoverController</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">getter</span> <span class="o">=</span> <span class="n">isKeyboardVisible</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">keyboardVisible</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="n">MWLCitiesTableViewController</span> <span class="o">*</span><span class="n">selectionController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MWLContainerViewController</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span>
</span><span class='line'>                                             <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">keyboardDidShow</span><span class="p">:)</span>
</span><span class='line'>                                                 <span class="nl">name</span><span class="p">:</span><span class="n">UIKeyboardDidShowNotification</span>
</span><span class='line'>                                               <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span>
</span><span class='line'>                                             <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">keyboardDidHide</span><span class="p">:)</span>
</span><span class='line'>                                                 <span class="nl">name</span><span class="p">:</span><span class="n">UIKeyboardDidHideNotification</span>
</span><span class='line'>                                               <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidDisappear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">keyboardDidShow:</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">keyboardVisible</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span><span class="p">.</span><span class="n">editing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">showControllerIfNeeded</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">keyboardDidHide:</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">keyboardVisible</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showControllerIfNeeded:</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">searchPopoverController</span><span class="p">.</span><span class="n">popoverVisible</span> <span class="o">==</span> <span class="nb">NO</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="p">.</span><span class="n">keyboardVisible</span> <span class="o">==</span> <span class="nb">YES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">searchPopoverController</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">itemSelectionPopover</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">searchPopoverController</span> <span class="nl">presentPopoverFromRect</span><span class="p">:</span><span class="n">sender</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>                                                      <span class="nl">inView</span><span class="p">:</span><span class="n">sender</span>
</span><span class='line'>                                    <span class="nl">permittedArrowDirections</span><span class="p">:</span><span class="n">UIPopoverArrowDirectionDown</span>
</span><span class='line'>                                                    <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIPopoverController</span> <span class="o">*</span><span class="p">)</span><span class="nf">itemSelectionPopover</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MWLCitiesTableViewController</span> <span class="o">*</span><span class="n">cityController</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier</span><span class="p">:</span><span class="n">kMWLSegueControllerIdentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">selectionController</span> <span class="o">=</span> <span class="n">cityController</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">selectionController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIPopoverController</span> <span class="o">*</span><span class="n">popoverController</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPopoverController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentViewController</span><span class="p">:</span><span class="n">cityController</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">popoverController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">popoverController</span><span class="p">.</span><span class="n">popoverContentSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">popoverController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UITextFieldDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">textFieldDidBeginEditing:</span><span class="p">(</span><span class="bp">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span><span class="p">.</span><span class="n">clearsOnInsertion</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">showControllerIfNeeded</span><span class="p">:</span><span class="n">textField</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">textFieldDidEndEditing:</span><span class="p">(</span><span class="bp">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">searchPopoverController</span> <span class="nl">dismissPopoverAnimated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">textFieldShouldReturn:</span><span class="p">(</span><span class="bp">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">textField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UIPopoverControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">popoverControllerDidDismissPopover:</span><span class="p">(</span><span class="bp">UIPopoverController</span> <span class="o">*</span><span class="p">)</span><span class="nv">popoverController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//delegate down</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">popoverControllerShouldDismissPopover:</span><span class="p">(</span><span class="bp">UIPopoverController</span> <span class="o">*</span><span class="p">)</span><span class="nv">popoverController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - MWLCitiesTableViewControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">citiesTableView:</span><span class="p">(</span><span class="n">MWLCitiesTableViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'>          <span class="nf">didSelectCity:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">cityName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cityName</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so we have view controller that hold <code>UITextField</code> and <code>UIPopoverController</code> and opens it when user focus on the textfield. Popover will close if:</p>

<p>a) User enter something and hide keyboard using hide key (bottom right corner)  <br/>
b) User will press return button on keyboard <br/>
c) User will select some value from popover <br/>
d) User will tap outside to dimiss popover</p>

<p>Every seems to work fine except the last scenario where user tap outside to cancel and hide popover. So it is again connected with <code>UIPopoverController</code> delegate methods as option a, b, c closes popover from code using <code>[self.searchPopoverController dismissPopoverAnimated:YES];</code> and as we all know popover delegate methods are called ONLY if you close popover by touching outside of it. Moving forward if you look closely you will recognize that when this code executes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">popoverControllerShouldDismissPopover:</span><span class="p">(</span><span class="bp">UIPopoverController</span> <span class="o">*</span><span class="p">)</span><span class="nv">popoverController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>we are acutally calling this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">textFieldDidEndEditing:</span><span class="p">(</span><span class="bp">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">searchPopoverController</span> <span class="nl">dismissPopoverAnimated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>before we leave function, so in iOS8 we are trying to close already closing popover, why this code works on iOS7? maybe there is difference in responder chain so that&rsquo;s why we are passing dimiss command down in responder. If you not belive me try and set break point in viewDidDisappear :) Reassuming to fix this isse we need to change this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">popoverControllerShouldDismissPopover:</span><span class="p">(</span><span class="bp">UIPopoverController</span> <span class="o">*</span><span class="p">)</span><span class="nv">popoverController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">typeCityTextField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span> <span class="c1">//YES; </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So there is no more duplicated dimiss command moving around in our view. Acutally in this example we are alwasy sure that we call <code>textFieldDidEndEditing</code> no matter user do. But if you ever encounter some stupid , weird behaviours of your modal views you should first look at reponder chain logic.</p>

<p>That&rsquo;s it, <a href="https://github.com/noxytrux/iOS8ModalViewIssue">source code</a> as always available on my github page. Next time another iOS8 issue that helps us develop &ldquo;better&rdquo; code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 Weirdness part1: UIPopoverController]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/17/ios8-weirdness-part1-uipopovercontroller/"/>
    <updated>2014-09-17T11:18:09+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/17/ios8-weirdness-part1-uipopovercontroller</id>
    <content type="html"><![CDATA[<p>As and old wolf programmer with years of expirence in iOS I survive most of big iOS updates including switch from 4.2 to 5, from 5 to 6 and so on. Some people remember time when your app was able to work fine on all iOS verions, but all of that changes with iOS7 it makes a big change to how app are made. There is no more easy way to support iOS6 and iOS7 in one app. Apple make new iOS7 API really cool, now we have truly working Interface Builder, StoryBoards, Autolayouts etc. Making apps was never easier before. iOS8 looks event almost the same, so what could possibly go wrong?&hellip;</p>

<!--more-->


<p>Actually, a lot of things&hellip; But you say: &ldquo;oh comone, it not so bad at all. The era of dirty hacks is away!&rdquo; - NOPE.</p>

<p>With iOS8 Apple introduced new way to handle <code>UIAlert</code>, <code>UIActionSheet</code> and <code>UIPopoverController</code> by introducing brand new <code>UIPopoverPresentationController</code> and <code>UIAlertController</code>, but as we all know sometimes when you build big app that is developed for few months it is not an easy decision to drop support for specified iOS version&hellip; So let&rsquo;s support both! Of course we are not allowed to use new stuff, we still want our app to support iOS7 so we are not touching our code in terms of rewriting to new popovers and alerts.</p>

<p>If you prefer setuping popovers from code this article is not propably for you but if you are &ldquo;modern&rdquo; like me and you cannot anymore live without storyboards and segues you will be suprised what amazing new &ldquo;features&rdquo; iOS8 may bring to your iPad Application. Imagine this scenario: You are building your iPad app which require from you to select some values, so the natural way to handle that is to present data set in popover. Now let&rsquo;s say my app is some kind of alarm app so i need to setup and display time. I build my app and it works like a harm, no rocket sience here it&rsquo;s a simple one view controller app that fire up UIStoryBoardPopoverSegue when button gets pressed. The image explain app flow (look carefuly your popover segue is now set as deprecated in xCode 6 coz you should use new one which we can&rsquo;t use due to iOS7 support) so the app will works as described below:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/appflowpopovers.png" width="800"></p>

<p>a) User can press &ldquo;Set my date!&rdquo; button which opens Popover with DatePicker (sets &lsquo;now&rsquo; if date does not exist)<br/>
b) User can select date <br/>
c) By dimissing popover user is able to set new date<br/>
d) If user press button again popover will open with latest date selected</p>

<p>If we run the app on iOS7 this is what we will get:</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/popoversOK.gif" width="800"></p>

<p>Ok time for some code, honestly there not to much to explain. First let&rsquo;s see how do we implement our DatePicker Controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">LABDateViewController</span> : <span class="bp">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSDate</span> <span class="o">*</span><span class="n">date</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIDatePicker</span> <span class="o">*</span><span class="n">datePicker</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So regular UIViewController with UIDatePicker attached via Outlet, now let&rsquo;s see what does it actually do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;LABDateViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">LABDateViewController</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">datePicker</span> <span class="nl">addTarget</span><span class="p">:</span><span class="nb">self</span>
</span><span class='line'>                        <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">didChangeDate</span><span class="p">:)</span>
</span><span class='line'>              <span class="nl">forControlEvents</span><span class="p">:</span><span class="n">UIControlEventValueChanged</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nf">date</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">datePicker</span><span class="p">.</span><span class="n">date</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setDate:</span><span class="p">(</span><span class="bp">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">date</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">datePicker</span> <span class="nl">setDate</span><span class="p">:</span><span class="n">date</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didChangeDate:</span><span class="p">(</span><span class="bp">UIDatePicker</span> <span class="o">*</span><span class="p">)</span><span class="nv">picker</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//send date somewhere, update, watewa</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can expected not to much it is very simple VC that only sets and gets seleted date by overwriting setter and getter of our date property.</p>

<p>Now the main logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="p">[</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">LABDisplayTimePopoverSegueIdentifier</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UIStoryboardPopoverSegue</span> <span class="o">*</span><span class="n">popover</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIStoryboardPopoverSegue</span><span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">popover</span><span class="p">.</span><span class="n">popoverController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">LABDateViewController</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">LABDateViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">popover</span><span class="p">.</span><span class="n">popoverController</span><span class="p">.</span><span class="n">contentViewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">c</span><span class="p">.</span><span class="n">datePicker</span> <span class="nl">setDate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - popover delegate</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">popoverControllerShouldDismissPopover:</span><span class="p">(</span><span class="bp">UIPopoverController</span> <span class="o">*</span><span class="p">)</span><span class="nv">popoverController</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">popoverControllerDidDismissPopover</span><span class="p">:(</span><span class="bp">UIPopoverController</span> <span class="o">*</span><span class="p">)</span><span class="n">popoverController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//update title</span>
</span><span class='line'>    <span class="n">LABDateViewController</span> <span class="o">*</span><span class="n">vc</span> <span class="o">=</span> <span class="p">(</span><span class="n">LABDateViewController</span><span class="o">*</span><span class="p">)</span><span class="n">popoverController</span><span class="p">.</span><span class="n">contentViewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="o">=</span> <span class="n">vc</span><span class="p">.</span><span class="n">date</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">,</span> <span class="s">@&quot;Upsss...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">dateFormatter</span> <span class="nl">stringFromDate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">dateButton</span> <span class="nl">setTitle</span><span class="p">:</span><span class="n">title</span>
</span><span class='line'>                     <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I said not much to explain simply we are passing date if exist to our created <code>UIPopoverController</code> which is supplied by <code>UIStoryboardPopoverSegue</code> at the moment we pressed button. We also set ourselfs as delegate so we can respond to popover dimiss. So after it disappear we can set currently selected value and update button title.</p>

<p>Now guess what happens if you try to run this on iOS8 Device / Simulator ? Yes it will stop working :) Value will not update, button title will stay the same, basically madness and tons of WTF per minute.</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/popoversError.gif" width="800"></p>

<p>So where is the problem ? If you set breakpoint in any of delegate methods you will see that they are actually not called, not at all&hellip; So the next line that we may be interested is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIStoryboardPopoverSegue</span> <span class="o">*</span><span class="n">popover</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIStoryboardPopoverSegue</span><span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">;</span>
</span><span class='line'><span class="n">popover</span><span class="p">.</span><span class="n">popoverController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Setting the actual delegate, looks fine even if you go deeper and check StoryboardSegue you will see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIStoryboardSegue.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="bp">UIPopoverController</span>;
</span><span class='line'>
</span><span class='line'><span class="n">NS_CLASS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">5</span><span class="n">_0</span><span class="p">)</span> <span class="k">@interface</span> <span class="bp">UIStoryboardPopoverSegue</span> : <span class="bp">UIStoryboardSegue</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">UIPopoverController</span> <span class="o">*</span><span class="n">popoverController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it looks like <code>UIPopoverController</code> is retained and all is ok! The truth is that is not, i cannot explain why is this happening but after we assign our delegate the connection is droped like the popover has weak reference in the segue&hellip; The way to fix that without doing whole loading from code is to simply assing popover to strong variable, so the quick fix for that is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">LABViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="bp">UIPopoverControllerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UIButton</span> <span class="o">*</span><span class="n">dateButton</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSDate</span> <span class="o">*</span><span class="n">currentDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSDateFormatter</span> <span class="o">*</span><span class="n">dateFormatter</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIPopoverController</span> <span class="o">*</span><span class="n">chooseTimePopover</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our segue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="p">[</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">LABDisplayTimePopoverSegueIdentifier</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UIStoryboardPopoverSegue</span> <span class="o">*</span><span class="n">popover</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIStoryboardPopoverSegue</span><span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">;</span>
</span><span class='line'><span class="c1">//        popover.popoverController.delegate = self;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">chooseTimePopover</span> <span class="o">=</span> <span class="n">popover</span><span class="p">.</span><span class="n">popoverController</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">chooseTimePopover</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">LABDateViewController</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">LABDateViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">popover</span><span class="p">.</span><span class="n">popoverController</span><span class="p">.</span><span class="n">contentViewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">c</span><span class="p">.</span><span class="n">datePicker</span> <span class="nl">setDate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>if you compile this, you will notice that delegate methods are now finally called so one win achieved!, title is updating but&hellip; Oh wait why every time i open popover the date is the same ?! Yes we are half done here in iOS7 at the segue all VC are loaded. In iOS8 viewDidLoad is called after segue, so if you will set breakpoint in this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">c</span><span class="p">.</span><span class="n">datePicker</span> <span class="nl">setDate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//by doing in lldb</span>
</span><span class='line'>
</span><span class='line'><span class="n">po</span> <span class="n">c</span><span class="p">.</span><span class="n">datePicker</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//you should get </span>
</span><span class='line'>
</span><span class='line'><span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we need one final workaround for this, and there are 2 ways to do that first one:</p>

<p>If you VC do not need to load many variables its a good idea to set some temporary variable that will store the date as long as the viewDidLoad is not called.</p>

<p>Second one:</p>

<p>If you are lazy or you just don&rsquo;t want to change all your code you can do simple trick forcing view to load by putting this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__unused</span> <span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">view</span><span class="p">;</span> <span class="c1">// or (void)c.view;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the final code will looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="p">[</span><span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">LABDisplayTimePopoverSegueIdentifier</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UIStoryboardPopoverSegue</span> <span class="o">*</span><span class="n">popover</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIStoryboardPopoverSegue</span><span class="o">*</span><span class="p">)</span><span class="n">segue</span><span class="p">;</span>
</span><span class='line'><span class="c1">//        popover.popoverController.delegate = self;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">chooseTimePopover</span> <span class="o">=</span> <span class="n">popover</span><span class="p">.</span><span class="n">popoverController</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">chooseTimePopover</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">LABDateViewController</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">LABDateViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">popover</span><span class="p">.</span><span class="n">popoverController</span><span class="p">.</span><span class="n">contentViewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">__unused</span> <span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">view</span><span class="p">;</span> <span class="c1">// or (void)c.view;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">c</span><span class="p">.</span><span class="n">datePicker</span> <span class="nl">setDate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">currentDate</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should fix all the issues related above :) hope some of you will find this helpfull. If you want to test this by yourself, here is the link to <a href="https://github.com/noxytrux/iOS8PopoverIssue">source code</a></p>

<p>Keep in mind this is not an elegant solution, it is more like a temporary workaround for the issue. If you cannot rewrite your segues to <code>UIPopoverPresentationController</code> it is a good idea to put popover loading back to code or use some additional variables in contentViewController to keep your code clean. We can always wait until Apple will put some fix for that.</p>

<p>Ok that&rsquo;s all for today, next time another funny iOS8 problem i encounter during my regular day work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient particle system using OpenGL ES2.0]]></title>
    <link href="http://noxytrux.github.io/blog/2014/09/16/efficient-particle-system-using-opengles2-dot-0/"/>
    <updated>2014-09-16T18:47:35+02:00</updated>
    <id>http://noxytrux.github.io/blog/2014/09/16/efficient-particle-system-using-opengles2-dot-0</id>
    <content type="html"><![CDATA[<p>My first blog post, wow it took me a while to force myself to do that. If you are tired of digging in docs and stackoverflow it&#8217;a a good place to read.</p>

<p>Particles are the most wanted things in games, every good game need some nice and fast particle system on board. Most of people know that good particle system require tons of particles to be processed. Today i&rsquo;m gonna show you not how to implement master piece class to manage particles but how to implement simple and most important fast particle system on GPU for your own OpenGL game.</p>

<!--more-->


<p>More particles you have, better they look. This could be easy to say on PC but when it comes to Mobile device every instruction counts&hellip; So we need few things to get this work:</p>

<p>1) Simple data struct to keep our buffers updated <br/>
2) Most of calculations need to be done on GPU so, yeah GLSL <br/>
3) Possible to modify size, color, rotation, fade etc.   <br/>
4) Point spites</p>

<p>if we do it right, effects will be amazing!</p>

<p><img class="center" src="http://noxytrux.github.io/assets/images/particle.gif" width="800" height="600"></p>

<p>So first we need some arrays to keep our GPU buffers up to date:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">kMaxParticleSize</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span> <span class="c1">//our particle emmiter limit</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">SparcleVertex</span> <span class="p">[</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">kMaxParticleSize</span> <span class="p">]</span> <span class="p">,</span> <span class="o">*</span> <span class="n">pSparcleVertex</span><span class="p">;</span> <span class="c1">// 3 coz xyz</span>
</span><span class='line'><span class="kt">float</span> <span class="n">SparcleColor</span> <span class="p">[</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">kMaxParticleSize</span> <span class="p">]</span> <span class="p">,</span> <span class="o">*</span> <span class="n">pSparcleColor</span><span class="p">;</span> <span class="c1">// 4 coz rgba</span>
</span><span class='line'><span class="kt">float</span> <span class="n">SparcleRotation</span> <span class="p">[</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">kMaxParticleSize</span> <span class="p">]</span> <span class="p">,</span> <span class="o">*</span> <span class="n">pSparcleRotation</span><span class="p">;</span> <span class="c1">// sin(angle) cos(angle) fadevalue</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it is time to implement our Sparke class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Sparcle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">3</span> <span class="p">];</span> <span class="c1">// position</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">3</span> <span class="p">];</span> <span class="c1">// acceleration</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">Wind</span><span class="p">[</span> <span class="mi">3</span> <span class="p">];</span> <span class="c1">// wind direction</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">Time</span><span class="p">;</span> <span class="c1">// life time</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">MaxTime</span><span class="p">;</span> <span class="c1">// max life time</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">gravity</span><span class="p">;</span> <span class="c1">// gravity </span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">h</span><span class="p">;</span> <span class="c1">// saved impact height (height at sparcle hit floor)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">color</span><span class="p">[</span> <span class="mi">4</span> <span class="p">];</span> <span class="c1">//sparce color</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">angle</span><span class="p">;</span> <span class="c1">//current rotation angle </span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">random</span><span class="p">;</span> <span class="c1">//random seed so each particle do not start at same angle</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">rotated</span><span class="p">;</span> <span class="c1">//do we rotate sparcle at each frame</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Sparcle</span><span class="p">(</span><span class="kt">bool</span> <span class="n">isRotated</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">rotated</span> <span class="o">=</span> <span class="n">isRotated</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Time</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="n">gravity</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">angle</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="n">random</span> <span class="o">=</span> <span class="n">rotated</span> <span class="o">?</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">64</span> <span class="o">:</span> <span class="p">((</span><span class="kt">float</span><span class="p">)(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">360</span><span class="p">)</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mf">180.0</span><span class="p">);</span> <span class="c1">//put some random angle at start</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// simulate, bool indicated whatever remove this sparcle or not</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">Simulate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Time</span> <span class="o">+=</span> <span class="n">globalDT</span><span class="p">;</span> <span class="c1">//you may want to pass delta time as parameter</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">Time</span> <span class="o">&gt;</span> <span class="n">MaxTime</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//our sparcle died remove it from queue</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//calcualte alpha 0.0-1.0</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">k</span> <span class="o">=</span> <span class="n">Time</span> <span class="o">/</span> <span class="n">MaxTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//update position</span>
</span><span class='line'>        <span class="n">Pos</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">+</span> <span class="n">Wind</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="p">)</span> <span class="o">*</span> <span class="n">globalDT</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Pos</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">+</span> <span class="n">Wind</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="p">)</span> <span class="o">*</span> <span class="n">globalDT</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Pos</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">+</span> <span class="n">Wind</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="p">)</span> <span class="o">*</span> <span class="n">globalDT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Acc</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">+=</span> <span class="n">gravity</span> <span class="o">*</span> <span class="n">globalDT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span><span class="o">*</span><span class="n">Acc</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">+</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span><span class="o">*</span><span class="n">Acc</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">&gt;</span> <span class="mf">0.08f</span> <span class="p">)</span> <span class="c1">// update particle height if acceleration is big enought</span>
</span><span class='line'>            <span class="n">h</span> <span class="o">=</span> <span class="n">GetHeight</span><span class="p">(</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="p">,</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">&lt;</span> <span class="n">h</span> <span class="o">&amp;&amp;</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mf">0.05f</span> <span class="p">)</span> <span class="c1">// if particle is falling and hit floor</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//calculate reflect vector </span>
</span><span class='line'>            <span class="n">Pos</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Vector3f</span> <span class="nf">in</span><span class="p">(</span> <span class="n">Acc</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">float</span> <span class="n">length</span> <span class="o">=</span> <span class="n">in</span> <span class="p">.</span> <span class="n">length</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">in</span> <span class="o">/=</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Vector3f</span> <span class="nf">norm</span><span class="p">(</span> <span class="n">GetNormal</span><span class="p">(</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="p">,</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Vector3f</span> <span class="n">out</span> <span class="o">=</span> <span class="n">Reflect</span><span class="p">(</span> <span class="n">in</span> <span class="p">,</span> <span class="n">norm</span> <span class="p">);</span> <span class="c1">// bounce particle</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">out</span> <span class="o">*=</span> <span class="n">length</span> <span class="o">*</span> <span class="mf">0.3</span><span class="p">;</span> <span class="c1">//damping </span>
</span><span class='line'>
</span><span class='line'>            <span class="n">memcpy</span><span class="p">(</span> <span class="n">Acc</span> <span class="p">,</span> <span class="o">&amp;</span><span class="n">out</span> <span class="p">,</span> <span class="mi">12</span> <span class="p">);</span> <span class="c1">//3 * sizeof(float)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">angle</span> <span class="o">=</span> <span class="n">rotated</span> <span class="o">?</span> <span class="p">(</span><span class="n">Time</span> <span class="o">+</span> <span class="n">random</span><span class="p">)</span> <span class="o">:</span>  <span class="n">random</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">color</span><span class="p">[</span> <span class="mi">3</span> <span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="n">fast_absf</span><span class="p">(</span> <span class="n">k</span> <span class="o">*</span> <span class="mf">2.0</span> <span class="o">-</span> <span class="mf">1.0</span> <span class="p">);</span> <span class="c1">//fade out </span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// im using simple iOS OpenglES 2.0 with premultiplied alpha so this may vary on platform</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">color</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">color</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">color</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">color</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">color</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">color</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">color</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">sinf</span><span class="p">(</span> <span class="n">angle</span> <span class="p">),</span> <span class="n">cosf</span><span class="p">(</span> <span class="n">angle</span> <span class="p">),</span> <span class="p">(</span><span class="mf">1.0f</span><span class="o">-</span><span class="n">k</span><span class="p">)</span> <span class="p">};</span> <span class="c1">//3rd value is used to specify particle size at given life time</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//update our buffers </span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span> <span class="n">pSparcleVertex</span> <span class="p">,</span> <span class="n">Pos</span> <span class="p">,</span> <span class="mi">12</span> <span class="p">);</span> <span class="n">pSparcleVertex</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span> <span class="n">pSparcleColor</span> <span class="p">,</span> <span class="n">c</span> <span class="p">,</span> <span class="mi">16</span> <span class="p">);</span> <span class="n">pSparcleColor</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span> <span class="n">pSparcleRotation</span> <span class="p">,</span> <span class="n">r</span> <span class="p">,</span> <span class="mi">12</span> <span class="p">);</span> <span class="n">pSparcleRotation</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ok so it is almost all, now we need some manager / emitter for our sparkles</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">SparclesManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span> <span class="n">Sparcle</span> <span class="o">&gt;</span> <span class="n">S</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">gravity</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">Wind</span><span class="p">[</span> <span class="mi">3</span> <span class="p">];</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">p_size_min</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">p_size_max</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">p_size_decrase</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">rotated</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Texture</span> <span class="o">*</span> <span class="n">texture</span><span class="p">;</span> <span class="c1">//class pointing to texture this is simple wrapper for GLuint texID </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SparclesManager</span><span class="p">(</span>    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">float</span> <span class="n">g</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">float</span> <span class="n">w1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">float</span> <span class="n">w2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">float</span> <span class="n">w3</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">)</span> <span class="o">:</span>
</span><span class='line'>                      <span class="n">graviti</span><span class="p">(</span> <span class="n">g</span> <span class="p">),</span> <span class="n">p_size_min</span><span class="p">(</span> <span class="n">s</span> <span class="p">),</span> <span class="n">p_size_max</span><span class="p">(</span> <span class="n">s</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">rotated</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p_size_decrase</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pSparcleVertex</span> <span class="o">=</span> <span class="n">SparcleVertex</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pSparcleColor</span> <span class="o">=</span> <span class="n">SparcleColor</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pSparcleRotation</span> <span class="o">=</span> <span class="n">SparcleRotation</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">Clear</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">S</span> <span class="p">.</span> <span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//add new particles to manager</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">Add</span><span class="p">(</span>   <span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">y</span> <span class="p">,</span> <span class="kt">float</span> <span class="n">z</span> <span class="p">,</span>
</span><span class='line'>              <span class="kt">float</span> <span class="n">vx</span><span class="p">,</span> <span class="kt">float</span> <span class="n">vy</span><span class="p">,</span> <span class="kt">float</span> <span class="n">vz</span><span class="p">,</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">num</span> <span class="p">,</span>
</span><span class='line'>              <span class="n">GLubyte</span> <span class="n">r</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">g</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">b</span> <span class="p">,</span>
</span><span class='line'>              <span class="kt">float</span> <span class="n">MaxTime</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">10</span><span class="o">*</span><span class="mf">0.2f</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Sparcle</span> <span class="n">s</span><span class="p">(</span><span class="n">rotated</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">s</span> <span class="p">.</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s</span> <span class="p">.</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s</span> <span class="p">.</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span> <span class="n">s</span> <span class="p">.</span> <span class="n">Wind</span> <span class="p">,</span> <span class="n">Wind</span><span class="p">,</span> <span class="mi">12</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">s</span> <span class="p">.</span> <span class="n">gravity</span> <span class="o">=</span> <span class="n">gravity</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s</span> <span class="p">.</span> <span class="n">MaxTime</span> <span class="o">=</span> <span class="n">MaxTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span>  <span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span> <span class="c1">// add multiple particles at once</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// particle color</span>
</span><span class='line'>            <span class="n">s</span> <span class="p">.</span> <span class="n">color</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">r</span> <span class="o">/</span> <span class="mf">255.0f</span><span class="p">;</span>
</span><span class='line'>            <span class="n">s</span> <span class="p">.</span> <span class="n">color</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">g</span> <span class="o">/</span> <span class="mf">255.0f</span><span class="p">;</span>
</span><span class='line'>            <span class="n">s</span> <span class="p">.</span> <span class="n">color</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">b</span> <span class="o">/</span> <span class="mf">255.0f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//acceleration</span>
</span><span class='line'>            <span class="n">s</span> <span class="p">.</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">=</span> <span class="n">vx</span> <span class="o">+</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">20</span> <span class="o">-</span> <span class="mi">10</span> <span class="p">)</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">s</span> <span class="p">.</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">=</span> <span class="p">(</span> <span class="n">vy</span> <span class="o">+</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">20</span> <span class="o">-</span> <span class="mi">10</span> <span class="p">)</span> <span class="o">*</span> <span class="mf">0.1</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">3</span> <span class="o">*</span> <span class="mf">0.3f</span> <span class="o">+</span> <span class="mf">0.3f</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">s</span> <span class="p">.</span> <span class="n">Acc</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">=</span> <span class="n">vz</span> <span class="o">+</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">20</span> <span class="o">-</span> <span class="mi">10</span> <span class="p">)</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">S</span> <span class="p">.</span> <span class="n">push_back</span><span class="p">(</span> <span class="n">s</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// render all particles</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">Render</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//bind our particle texture </span>
</span><span class='line'>        <span class="n">glActiveTexture</span><span class="p">(</span><span class="n">GL_TEXTURE0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glUniform1i</span><span class="p">(</span><span class="n">MainMatrix3D</span><span class="o">-&gt;</span><span class="n">ParticleShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_TEX0</span><span class="p">],</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">texture</span> <span class="o">-&gt;</span> <span class="n">Bind</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//reset buffer position</span>
</span><span class='line'>        <span class="n">pSparcleVertex</span> <span class="o">=</span> <span class="n">SparcleVertex</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pSparcleColor</span> <span class="o">=</span> <span class="n">SparcleColor</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pSparcleRotation</span> <span class="o">=</span> <span class="n">SparcleRotation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glEnable</span><span class="p">(</span> <span class="n">GL_BLEND</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//bind required data (modelview and projection matrix)</span>
</span><span class='line'>        <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">MainMatrix3D</span><span class="o">-&gt;</span><span class="n">ParticleShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_PROJECTION_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">MainMatrix3D</span><span class="o">-&gt;</span><span class="n">Projection</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">MainMatrix3D</span><span class="o">-&gt;</span><span class="n">ParticleShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_MODELVIEW_WORLD_MAT</span><span class="p">],</span> <span class="mi">1</span> <span class="p">,</span><span class="nb">false</span> <span class="p">,</span> <span class="n">MainMatrix3D</span><span class="o">-&gt;</span><span class="n">ModelView</span><span class="p">.</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//this fill our buffers with data calculated for each particle</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">S</span> <span class="p">.</span> <span class="n">size</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">S</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="p">.</span> <span class="n">Simulate</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">S</span> <span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">S</span> <span class="p">.</span> <span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//send to shader minimum particle size (at start) it maximum size and how much it should decrase size over time</span>
</span><span class='line'>        <span class="n">glUniform3f</span><span class="p">(</span><span class="n">MainMatrix3D</span><span class="o">-&gt;</span><span class="n">ParticleShader</span><span class="o">-&gt;</span><span class="n">uniforms</span><span class="p">[</span><span class="n">UNI_TEX2</span><span class="p">],</span> <span class="n">p_size_min</span><span class="p">,</span> <span class="n">p_size_max</span><span class="p">,</span> <span class="n">p_size_decrase</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//bind buffer to GPU</span>
</span><span class='line'>        <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SparcleVertex</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_VERTEX</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_COLOR</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SparcleColor</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_COLOR</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">ATTRIB_NORMAL</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SparcleRotation</span><span class="p">);</span>
</span><span class='line'>        <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">ATTRIB_NORMAL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//and draw them as simple POINTS!</span>
</span><span class='line'>        <span class="n">glDrawArrays</span><span class="p">(</span> <span class="n">GL_POINTS</span> <span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="n">S</span> <span class="p">.</span> <span class="n">size</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glDisable</span><span class="p">(</span> <span class="n">GL_BLEND</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will not put here any source code releated to loading textures and shaders in OpenGL as there are tons of other tutorials which explain how to do that. The most importand thing is that as you probably noticed we are not drawing any geometry here! That&rsquo;s the true power of point sprites. They allow you to draw textured POINTS! the tricky part is to give them proper size and rotation which may not be so easy. Thanks god, most modern phones uses <code>gl_PointCoord</code> and <code>gl_PointSize</code> to manipulate vertex data on GPU.</p>

<p>Finally some shaders that will do all the hard work for us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">//VERTEX SHADER</span>
</span><span class='line'>
</span><span class='line'><span class="k">precision</span> <span class="k">mediump</span> <span class="k">float</span><span class="p">;</span> <span class="c1">//mobile device so we need to specify precison (mediup will be good enought)</span>
</span><span class='line'>
</span><span class='line'><span class="k">attribute</span> <span class="k">vec4</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'><span class="k">attribute</span> <span class="k">vec4</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'><span class="k">attribute</span> <span class="k">vec3</span> <span class="n">rotvec</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">uniform</span>    <span class="k">mat4</span> <span class="n">projection</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">mat4</span> <span class="n">modelView</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">vec3</span> <span class="n">pSize</span><span class="p">;</span> <span class="c1">// min, max, decrase</span>
</span><span class='line'>
</span><span class='line'><span class="k">varying</span> <span class="k">vec4</span> <span class="n">pcolor</span><span class="p">;</span>
</span><span class='line'><span class="k">varying</span> <span class="k">mat2</span> <span class="n">particleRot</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//we need to build our 2x2 matrix so we can rotate texture coordinates that comes from GPU</span>
</span><span class='line'>    <span class="n">particleRot</span><span class="p">[</span><span class="mo">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">vec2</span><span class="p">(</span> <span class="n">rotvec</span><span class="p">.</span><span class="n">y</span> <span class="p">,</span> <span class="o">-</span><span class="n">rotvec</span><span class="p">.</span><span class="n">x</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">particleRot</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">rotvec</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    [cos(angle),-sin(angle),</span>
</span><span class='line'><span class="cm">     sin(angle), cos(angle)]</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pcolor</span> <span class="o">=</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="c1">//to explain this:</span>
</span><span class='line'>    <span class="c1">//let say min size is 2 and maximum is 5 and reduction is also 2 so the size will move</span>
</span><span class='line'>    <span class="c1">//from 2 -&gt; 5 -&gt; 3 (2-&gt;5-&gt;(5-2)) so it is close to easyOutBack function</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gl_PointSize</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span> <span class="n">pSize</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="p">(</span> <span class="n">rotvec</span><span class="p">.</span><span class="n">z</span> <span class="o">-</span> <span class="mf">1.0</span> <span class="p">)</span> <span class="o">+</span> <span class="n">pSize</span><span class="p">.</span><span class="n">y</span> <span class="p">,</span> <span class="n">pSize</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">rotvec</span><span class="p">.</span><span class="n">z</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">gl_Position</span> <span class="o">=</span> <span class="n">projection</span> <span class="o">*</span> <span class="p">(</span><span class="n">modelView</span> <span class="o">*</span> <span class="n">position</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//FRAGMENT SHADER</span>
</span><span class='line'>
</span><span class='line'><span class="k">precision</span> <span class="k">mediump</span> <span class="k">float</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">varying</span> <span class="k">vec4</span> <span class="n">pcolor</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">sampler2D</span> <span class="n">pTex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">varying</span> <span class="k">mat2</span> <span class="n">particleRot</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">texCoord</span> <span class="o">=</span> <span class="n">particleRot</span> <span class="o">*</span> <span class="p">(</span> <span class="n">gl_PointCoord</span> <span class="o">-</span> <span class="k">vec2</span><span class="p">(</span> <span class="mf">0.5</span> <span class="p">)</span> <span class="p">);</span> <span class="c1">//use our rotation matrix to modyfi texture coordinates</span>
</span><span class='line'>    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span> <span class="n">pTex</span> <span class="p">,</span> <span class="n">texCoord</span> <span class="o">+</span> <span class="k">vec2</span><span class="p">(</span> <span class="mf">0.5</span> <span class="p">)</span> <span class="p">)</span> <span class="o">*</span> <span class="n">pcolor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One more thing: remember to load your texture with <code>GL_CLAMP_TO_EDGE</code> paramter otherwise you may get some weird artifacts while rendering particles when they rotate.</p>

<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//init</span>
</span><span class='line'>
</span><span class='line'><span class="n">SparclesManager</span>
</span><span class='line'>
</span><span class='line'><span class="n">LightSparcles</span><span class="p">,</span>
</span><span class='line'><span class="n">ParticleSmoke</span><span class="p">(</span> <span class="mi">64</span> <span class="p">,</span> <span class="mf">0.0f</span> <span class="p">,</span> <span class="mi">14</span> <span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="mi">3</span> <span class="p">),</span>
</span><span class='line'><span class="n">TankSmokeWater</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ParticleSmoke</span> <span class="p">.</span> <span class="n">texture</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Texture</span><span class="p">(</span> <span class="s">&quot;particle1&quot;</span><span class="p">,</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="n">ParticleSmoke</span> <span class="p">.</span> <span class="n">p_size_min</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'><span class="n">ParticleSmoke</span> <span class="p">.</span> <span class="n">p_size_max</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">LightSparcles</span> <span class="p">.</span> <span class="n">texture</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Texture</span><span class="p">(</span> <span class="s">&quot;particle2&quot;</span><span class="p">,</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="n">LightSparcles</span> <span class="p">.</span> <span class="n">p_size_min</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'><span class="n">LightSparcles</span> <span class="p">.</span> <span class="n">p_size_max</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TankSmokeWater</span> <span class="p">.</span> <span class="n">texture</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Texture</span><span class="p">(</span> <span class="s">&quot;fx_water-splash-01&quot;</span><span class="p">,</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="n">TankSmokeWater</span> <span class="p">.</span> <span class="n">p_size_min</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span><span class='line'><span class="n">TankSmokeWater</span> <span class="p">.</span> <span class="n">p_size_max</span> <span class="o">=</span> <span class="mi">150</span><span class="p">;</span>
</span><span class='line'><span class="n">TankSmokeWater</span> <span class="p">.</span> <span class="n">p_size_decrase</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'><span class="n">TankSmokeWater</span> <span class="p">.</span> <span class="n">rotated</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//example particle adding</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">dx</span> <span class="o">=</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">10</span> <span class="o">-</span> <span class="mi">5</span> <span class="p">)</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">dz</span> <span class="o">=</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">10</span> <span class="o">-</span> <span class="mi">5</span> <span class="p">)</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LightSparcles</span> <span class="p">.</span> <span class="n">Add</span><span class="p">(</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span>  <span class="p">,</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">,</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="p">,</span>  <span class="n">dx</span><span class="o">*</span><span class="mi">2</span> <span class="p">,</span> <span class="n">dy</span> <span class="p">,</span> <span class="n">dz</span><span class="o">*</span><span class="mi">2</span> <span class="p">,</span> <span class="mi">12</span> <span class="p">,</span> <span class="mi">244</span><span class="p">,</span> <span class="mi">142</span><span class="p">,</span> <span class="mi">74</span> <span class="p">,</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">2</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">ParticleSmoke</span> <span class="p">.</span> <span class="n">Add</span><span class="p">(</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span>  <span class="p">,</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">,</span> <span class="n">Pos</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="p">,</span>  <span class="n">dx</span> <span class="p">,</span> <span class="mf">0.0f</span> <span class="p">,</span> <span class="n">dz</span> <span class="p">,</span> <span class="mi">1</span> <span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//drawing</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">glkView:</span><span class="p">(</span><span class="bp">GLKView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span> <span class="nf">drawInRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="n">RETINA_SCALE</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="n">RETINA_SCALE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glClearColor</span><span class="p">(</span> <span class="mf">1.0</span> <span class="p">,</span> <span class="mf">1.0</span> <span class="p">,</span> <span class="mf">1.0</span> <span class="p">,</span> <span class="mf">1.0</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span> <span class="c1">// Clear The Screen And The Depth Buffer</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glUseProgram</span><span class="p">(</span><span class="n">MainMatrix3D</span><span class="o">-&gt;</span><span class="n">ParticleShader</span><span class="o">-&gt;</span><span class="n">ShaderProgram</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glDepthMask</span><span class="p">(</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Sparcles</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">ParticleSmoke</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">TankSmoke</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">TankSmokeWater</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">TankSmokeGrass</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">TreeParticles</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">HouseParticles</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glBlendFunc</span><span class="p">(</span> <span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ONE</span> <span class="p">);</span> <span class="c1">//additive blending</span>
</span><span class='line'>    <span class="n">LightSparcles</span> <span class="p">.</span> <span class="n">Render</span><span class="p">();</span>
</span><span class='line'>    <span class="n">glBlendFunc</span><span class="p">(</span> <span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ONE_MINUS_SRC_ALPHA</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glDepthMask</span><span class="p">(</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! now we have some really simple and small (less than 300lines of code) particle emitter :) most of code is done in C++ so you can easily port / use this in other mobile platform. I&rsquo;m using same implementation in my iOS Game <a href="http://sagatanks.com/">SagaTanks</a> and it works great. You can see it in action in the video below:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/AkVa1cmwaMY" allowfullscreen></iframe></div>


<p>That&rsquo;s all for today, next time i will talk about iOS8 weirdness.</p>
]]></content>
  </entry>
  
</feed>
